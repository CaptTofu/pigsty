#!/usr/bin/env ansible-playbook
---
#==============================================================#
# File      :   pgsql-db.yml
# Desc      :   create database on existing cluster
# Ctime     :   2021-02-27
# Mtime     :   2022-12-07
# Path      :   pgsql-db.yml
# Deps      :   templates/pg-db.sql
# Author    :   Ruohang Feng (rh@vonng.com)
# License   :   AGPLv3
#==============================================================#


#==============================================================#
# How to create new database on existing postgres cluster ?    #
#==============================================================#
#  1.  Define new database in inventory (cmdb or config)
#      `all.children.<pg_cluster>.vars.pg_databases[i]`
#  2.  Execute this playbook on target cluster with arg dbname
#      `pgsql-db.yml -l <pg_cluster> -e dbname=<database.name>
#  3.  The playbook execution can be simplified by wrapper script
#      bin/pg-db <pg_cluster> <dbname>
#
#  This playbook will:
#   1. create database sql definition on `/pg/tmp/pg-db-{{ database.name }}.sql`
#   2. execute database creation/update sql on cluster leader instance
#   3. register database to grafana datasource when `db.register_datasource`
#   4. update /etc/pgbouncer/database.txt and reload pgbouncer if necessary
#==============================================================#
- name: PGSQL CREATEDB
  become: yes
  hosts: all
  gather_facts: no
  tasks:

    #----------------------------------------------------------#
    # Validate dbname and database definition        [preflight]
    # ---------------------------------------------------------#
    - name: preflight
      tags: [ preflight , always ]
      connection: local
      block:
        - name: validate dbname parameter
          assert:
            that:
              - dbname is defined
              - dbname != ''
              - dbname != 'postgres'
            fail_msg: variable 'pg_database' should be specified (-e dbname=<name>)

        - name: get database definition
          set_fact: db_def={{ pg_databases | json_query(db_def_query) }}
          vars: { db_def_query: "[?name=='{{ dbname }}'] | [0]" }

        - name: validate database definition
          assert:
            that:
              - db_def is defined
              - db_def != None
              - db_def != ''
              - db_def != {}
            fail_msg: define database {{ dbname }} in pg_databases first

        - debug:
            msg: "{{ db_def }}"

    #----------------------------------------------------------#
    # Create Postgres Database                        [postgres]
    # ---------------------------------------------------------#
    # create database according to database definition
    - include_tasks: roles/postgres/tasks/database.yml
      tags: postgres
      when: pg_role == 'primary'
      vars: { database: "{{ db_def }}" }


    #----------------------------------------------------------#
    # Create Postgres Database                        [grafana]
    # ---------------------------------------------------------#
    # register grafana database as grafana datasource
    - include_tasks: roles/postgres/tasks/register_grafana.yml
      ignore_errors: yes
      tags: [ register, grafana ]
      vars: { database: "{{ db_def }}" }


    #----------------------------------------------------------#
    # Refresh Pgbouncer Database Configuration       [pgbouncer]
    # ---------------------------------------------------------#
    - name: refresh pgbouncer databases
      tags: pgbouncer
      when: db_def.pgbouncer is not defined or db_def.pgbouncer|bool
      block:

        - name: render pgbouncer database.txt
          copy:
            dest: /etc/pgbouncer/database.txt
            owner: "{{ pg_dbsu|default('postgres') }}"
            group: postgres
            mode: 0600
            content: |
              {% for db in pg_databases %}
              {% if 'pgbouncer' not in db or db.pgbouncer|bool %}
              {% set connstr = "host=" + pg_localhost|default('/var/run/postgresql')|string %}
              {% if pgbouncer_redirect_to is defined and pgbouncer_redirect_to != '' %}{% set db_host = "host=" + pgbouncer_redirect_to %}{% endif %}
              {% if 'pool_auth_user' in db %}{% set connstr = connstr + " auth_user=" + db.pool_auth_user|string %}{% endif %}
              {% if 'pool_mode' in db %}{% set connstr = connstr + " pool_mode=" + db.pool_mode|string %}{% endif %}
              {% if 'pool_size' in db %}{% set connstr = connstr + " pool_size=" + db.pool_size|string %}{% endif %}
              {% if 'pool_size_min' in db %}{% set connstr = connstr + " min_pool_size=" + db.pool_size_min|string %}{% endif %}
              {% if 'pool_reserve' in db %}{% set connstr = connstr + " reserve_pool=" + db.pool_reserve|string %}{% endif %}
              {% if 'pool_connlimit' in db %}{% set connstr = connstr + " max_db_connections=" + db.pool_connlimit|string %}{% endif %}
              {{ "%-27s" | format(db.name) }} = {{ connstr }}
              {% endif %}
              {% endfor %}

        - name: reload pgbouncer
          systemd: name=pgbouncer state=reloaded enabled=yes daemon_reload=yes

...