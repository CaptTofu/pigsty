#!/usr/bin/env ansible-playbook
---
#==============================================================#
# File      :   infra.yml
# Ctime     :   2021-01-19
# Mtime     :   2022-07-18
# Desc      :   init everything on meta nodes
# Path      :   infra.yml
# Copyright (C) 2018-2022 Ruohang Feng (rh@vonng.com)
#==============================================================#

#---------------------------------------------------------------
# Notice
#---------------------------------------------------------------
# This playbook will init pigsty infra & pgsql on meta nodes.
#
# if you don't want touch postgres with this playbook, you can
# use ./infra.yml -e pg=none to skip pgsql cmdb parts
#
#---------------------------------------------------------------

#---------------------------------------------------------------
# setup meta node identity
#---------------------------------------------------------------
- name: Node Identity
  become: yes
  hosts: meta
  gather_facts: no
  tags: [ always, node-id ]
  connection: local
  tasks:

    # get node hostname and use it as nodename if missing and can not be inferred
    - name: Fill nodename with hostname
      when: (nodename is not defined or nodename == '') and not ( pg_hostname|bool and pg_cluster is defined and pg_seq is defined and pg_cluster != '' and pg_seq != '' )
      block:
        - { name: Get hostname for nodename, shell: "echo $HOSTNAME", register: hostname_result }
        - { name: Fill nodename with hostname, connection: local , set_fact: { nodename: "{{ hostname_result.stdout }}" } }

    - name: Calculate node identity
      connection: local
      set_fact:
        node_cluster: "{% if pg_hostname|bool and pg_cluster is defined and pg_cluster != '' and (node_cluster is not defined or node_cluster == 'nodes' or node_cluster == '') %}{{ pg_cluster }}{% else %}{{ node_cluster }}{% endif %}"
        nodename: "{% if pg_hostname|bool and pg_cluster is defined and pg_seq is defined and pg_cluster != '' and pg_seq != '' %}{{ pg_cluster }}-{{ pg_seq }}{% else %}{{ nodename|default(omit) }}{% endif %}"

    - name: Print node identity
      debug: { msg: "ins = {{ nodename|default('NULL') }}   cls = {{ node_cluster|default('NULL') }}" }


#---------------------------------------------------------------
# bootstrap meta node with local yum repo
#---------------------------------------------------------------
- name: Infra Bootstrap
  become: yes
  hosts: meta
  gather_facts: no
  tags: infra-boot
  roles:

    # INFRA
    - role: environ             # setup environment on meta nodes
      tags: environ

    - role: repo                # setup local yum repo on meta nodes
      tags: repo                # you can disable repo on extra meta nodes with nginx_enabled: false
      when: nginx_enabled|bool

    # NODES
    - role: node                # init meta node itself
      tags: [ node , node-init ]

    - role: ca                  # init ca-infra & dist to nodes
      tags: ca

    - role: docker              # init docker if enabled
      tags: docker
      when: docker_enabled|bool

    - role: consul              # init consul if enabled
      tags: [ dcs, consul ]
      when: consul_enabled|bool

    - role: etcd                # init etcd if enabled
      tags: [ dcs, etcd ]
      when: etcd_enabled|bool

    # INFRA
    - role: nameserver    # init dns nameserver
      tags: nameserver
      # when: nameserver_enabled|bool

    - role: nginx           # init nginx
      tags: nginx
      # when: nginx_enabled|bool

    - role: prometheus      # init prometheus
      tags: prometheus
      # when: prometheus_enabled|bool

    - role: grafana         # init grafana
      tags: grafana
      # when: grafana_enabled|bool

    - role: loki            # init loki
      tags: loki
      # when: loki_enabled|bool

    - role: infra_register
      tags: infra-register

    # NODE
    # init & register node exporter
    - role: node_exporter
      tags: node-exporter
      when: node_exporter_enabled|bool

    # init & register promtail log agent
    - role: promtail
      tags: promtail
      when: promtail_enabled|bool

    # register node-exporter & docker to prometheus
    - role: node_register
      tags: node-register



#---------------------------------------------------------------
# init cmdb(s) on meta nodes
#---------------------------------------------------------------
- name: PGSQL Identity
  hosts: meta
  gather_facts: no
  tags: [ always, pg-id ]
  connection: local
  become: no
  vars:
    pg: meta                # whether to install pgsql during infra init ?
      # all  : install on all nodes (default behavior)
      # meta : install on meta nodes only
      # none : do not install pgsql at all
  tasks:

    # fetch cluster inventory variable from hostvars of corresponding cluster
    - name: Gather pgsql basic facts
      set_fact:
        pg_meta={{ hostvars| json_query(cluster_query) }}
        pg_instance={{ pg_cluster }}-{{ pg_seq }}
        pg_service={{ pg_cluster }}-{{ pg_role }}
      vars: { cluster_query: "[@.*][0][?pg_cluster=='{{ pg_cluster }}']" }

    # calculate basic cluster facts from pg_meta
    - name: Build pgsql basic facts
      set_fact:
        pg_is_primary={{ pg_role == 'primary' }}
        pg_cluster_size={{ pg_meta | json_query("[].inventory_hostname") | unique | length }}
        pg_cluster_members={{ pg_meta | json_query("[].inventory_hostname") | unique | sort }}
        pg_cluster_primary_list={{ pg_meta | json_query("[?pg_role=='primary'].inventory_hostname") | unique | sort }}
        pg_cluster_replicas={{ pg_meta | json_query("[?pg_role!='primary'].inventory_hostname") | unique | sort }}
        pg_seq_next={{ pg_meta | json_query('max([].pg_seq)') | int + 1 }}
        pg_cluster_primary={{ (pg_meta | json_query("[?pg_role=='primary'].inventory_hostname") | unique | sort)[0] }}
        pg_cluster_primary_id={{ (pg_meta | json_query("[?pg_role=='primary'].pg_seq") | unique | sort)[0] }}

    # print instance pre-flight check summary
    - name: Show pgsql identity summary
      debug:
        msg: "{% if pg_cluster_primary_list|length < 1 %}[WARNING] NO PRIMARY FOR {{ pg_cluster }}  [WARNING]{% endif %}
          {% if pg_cluster_primary_list|length > 1 %}[WARNING] MULTIPLE PRIMARY FOR {{ pg_cluster }} : {{ pg_cluster_primary }} [WARNING]{% endif %}
          [{{ pg_role }}]  {{ pg_instance }} @ {{ inventory_hostname }} , 
          {% if pg_role == 'primary' %}{% if pg_upstream is defined %}STANDBY LEADER @ {{ pg_instance }}{% else %}CLUSTER LEADER @ {{ pg_instance }}{% endif %}
          {% else %}{% if pg_upstream is defined %}REPLICATE UPSTREAM {{ pg_upstream }} -> {{ pg_instance }} {% else %}REPLICATE PRIMARY {{ pg_cluster }}-{{ pg_cluster_primary_id }} -> {{ pg_instance }}{% endif %}{% endif %}
          , PGURL = postgres://{{ inventory_hostname }}:{{ pg_port }}/postgres"

#---------------------------------------------------------------
# init cmdb(s) on meta nodes
#---------------------------------------------------------------
- name: Meta PGSQL Init     # init pgsql cmdb on meta nodes
  become: yes
  hosts: meta
  gather_facts: no
  tags: [ infra-cmdb, pgsql-init ]
  vars:
    pg: meta                # whether to install pgsql during infra init ?
      # all  : install on all nodes (default behavior)
      # meta : install on meta nodes only
      # none : do not install pgsql at all
  roles:

    - role: postgres        # init postgres pgbouncer patroni
      tags: postgres

    - role: service         # init service , haproxy , vip
      tags: service

    - role: pg_exporter     # init monitor exporters
      tags: pg-exporter

    - role: pg_register     # register cluster/instance to infra
      tags: pg-register

#---------------------------------------------------------------
...
