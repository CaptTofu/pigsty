#!/usr/bin/env ansible-playbook
---
#==============================================================#
# File      :   gpsql.yml
# Ctime     :   2022-01-19
# Mtime     :   2022-01-27
# Desc      :   install gpsql (1 of 2)
# Path      :   gpsql.yml
# Copyright (C) 2018-2022 Ruohang Feng (rh@vonng.com)
#==============================================================#

#---------------------------------------------------------------
# How to create greenplum/matrixdb cluster ?
#  1. gpsql.yml
#  2. visit http://matrix.pigsty and installation with UI
#  3. gpsql-post.yml
#---------------------------------------------------------------


#---------------------------------------------------------------
- name: Check Inventory
  hosts: all
  gather_facts: no
  tags: preflight
  tasks:
    - name: Check greenplum inventory
      assert:
        that:
          - gp_cluster is defined and gp_cluster != ''
          - nodename is defined # you have to explict set hostname for gp members
          - gp_role is defined and (gp_role == 'master' or gp_role == 'segment')
          - gp_role == 'master' or (gp_role == 'segment' and pg_instances is defined and pg_instances|length > 0)

#---------------------------------------------------------------
- name: Init Infrastructure
  become: yes
  hosts: meta
  gather_facts: no
  tags: repos
  roles:

    - role: environ         # init postgres pgbouncer patroni
      tags: environ

    - role: repo            # init local yum repo on meta node
      tags: repo
      when: repo_enabled|bool

    - role: node            # init meta node
      tags: node

    - role: ca              # init ca-infrastructure
      tags: ca

    - role: nameserver      # init dns nameserver
      tags: nameserver

    - role: nginx           # init nginx
      tags: nginx

    - role: prometheus      # init prometheus
      tags: prometheus

    - role: grafana         # init grafana
      tags: grafana


#---------------------------------------------------------------
- name: Init All Nodes
  become: yes
  hosts: all
  gather_facts: no
  tags: nodes
  roles:

    - role: node            # init all node
    - role: node_exporter   # init all node exporter

#---------------------------------------------------------------
- name: Install Greenplum / MatrixDB
  become: yes
  hosts: all
  gather_facts: no
  tags: gpdb
  roles:
    - role: gp_prepare          # prepare for greenplum installation

    - role: pg_exporter         # prepare pg_exporter for gp master
      when: gp_role == 'master'



#---------------------------------------------------------------
- name: Prepare MatrixDB Credential
  become: yes
  hosts: all
  gather_facts: no
  tags: gp_credential
  tasks:

    - name: Fetch matrixdb password
      when: gp_role == 'master'
      shell: /bin/cat /etc/matrixdb/auth.conf | grep -Eo 'Password = "(.*)"' | grep -Eo '"(.*)"'
      register: matrixdb_auth_credential

    - name: 'Visit http://matrix.pigsty with password:'
      debug: msg={{ matrixdb_auth_credential.stdout | replace('"', '' ) }}
      when: gp_role == 'master'


#---------------------------------------------------------------
- name: Register MatrixDB to Grafana
  become: yes
  hosts: all
  gather_facts: no
  tags: gp_register
  tasks:

    #--------------------------------------------------------------#
    # Register MatrixDB Mgr Datasource to Grafana
    #--------------------------------------------------------------#
    - name: Register pgsql datasources to grafana
      when: gp_role == 'master'
      block:

        #--------------------------------------------------------------#
        # render datasource definition to:
        # /etc/pigsty/datasources/{{ pg_instance }}.{{ datname }}.json
        #--------------------------------------------------------------#
        - name: Render datasource definition on meta node
          delegate_to: meta
          run_once: true
          copy:
            dest: "/etc/pigsty/datasources/{{ insdb }}.json"
            content: |
              {
                "type": "postgres",
                "access": "proxy",
                "name": "matrixdb-metrics",
                "url": "{{ inventory_hostname }}:{{ pg_port }}",
                "user": "{{ pg_monitor_username }}",
                "database": "{{ datname }}",
                "typeLogoUrl": "",
                "basicAuth": false,
                "basicAuthUser": "",
                "basicAuthPassword": "",
                "withCredentials": false,
                "isDefault": false,
                "jsonData": {
                  "connMaxLifetime": 3600,
                  "maxIdleConns": 1,
                  "maxOpenConns": 8,
                  "postgresVersion": 1200,
                  "sslmode": "disable",
                  "tlsAuth": false,
                  "tlsAuthWithCACert": false
                },
                "secureJsonData":{
                  "password": "{{ pg_monitor_password }}"
                }
              }
            mode: 0600
          vars:
            datname: "{{ item.name }}"
            insdb: "{{ pg_cluster }}-{{ pg_seq }}.{{ datname }}"
          with_items: "{{ pg_databases }}"


        #--------------------------------------------------------------#
        # upsert datasource using grafana datasource API
        #--------------------------------------------------------------#
        - name: Load grafana datasource on meta node
          delegate_to: meta
          shell: |
            curl -X DELETE "{{ grafana_endpoint }}/api/datasources/name/{{ insdb }}" -u "{{ grafana_admin_username }}:{{ grafana_admin_password }}"  -H 'Content-Type: application/json' || true
            curl -X POST   "{{ grafana_endpoint }}/api/datasources/" -u "{{ grafana_admin_username }}:{{ grafana_admin_password }}"  -H 'Content-Type: application/json' -d @/etc/pigsty/datasources/{{ insdb }}.json || true
          vars:
            datname: "{{ item.name }}"
            insdb: "{{ pg_cluster }}-{{ pg_seq }}.{{ datname }}"
          with_items: "{{ pg_databases }}"

...
