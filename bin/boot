#!/bin/bash
set -euo pipefail

#==============================================================#
# File      :   boot
# Ctime     :   2021-04-20
# Mtime     :   2021-04-20
# Desc      :   boot meta node (use pkg.tgz and install ansible)
# Usage     :   boot <pkg.tgz>
# Note      :   run as root
#    1. install ansible with yum if cache not exists (then exit)
#    2. create local file repo with /tmp/pkg.tgz if exists
#    3. install ansible from local file repo
#    4. extract extra monitor binaries from local file repo
# Path      :   bin/boot
# Copyright (C) 2018-2021 Ruohang Feng
#==============================================================#

PROG_NAME="$(basename $0))"
PROG_DIR="$(cd $(dirname $0) && pwd)"
PIGSTY_HOME="$(cd $(dirname ${PROG_DIR}) && pwd)"
DEFAULT_PKG_PATH=/tmp/pkg.tgz

function log_info() {
    [[ -t 2 ]] && printf "\033[0;32m[$(date "+%Y-%m-%d %H:%M:%S")][$HOSTNAME][INFO] $*\033[0m\n" >&2 ||
        printf "[$(date "+%Y-%m-%d %H:%M:%S")][$HOSTNAME][INFO] $*\n" >&2
}
function log_error() {
    [[ -t 2 ]] && printf "\033[0;31m[$(date "+%Y-%m-%d %H:%M:%S")][$HOSTNAME][ERROR] $*\033[0m\n" >&2 ||
        printf "[$(date "+%Y-%m-%d %H:%M:%S")][$HOSTNAME][INFO] $*\n" >&2
}

#==============================================================#
# Arg1      :   pkg.tgz path (/tmp/pkg.tgz)
# Arg2      :   repo name (pigsty by default)
# Arg3      :   repo home (/www by default)
#==============================================================#
PKG_PATH=${1-${DEFAULT_PKG_PATH}}
REPO_NAME=${2-'pigsty'}
REPO_HOME=${3-'/www'}


#========================================#
# run this as root
#========================================#
if [[ "$(whoami)" != "root" ]]; then
    log_error "run this as root: sudo bin/boot"
    exit 1
fi

#========================================#
# install via yum if cache not exists
#========================================#
# check files/pkg.tgz exists
if [[ -e ${PKG_PATH} ]]; then
    log_info "${PKG_PATH} exists, extract to ${REPO_HOME}/${REPO_NAME}"
else
    log_error "${PKG_PATH} not exists, try install with yum directly"
    log_info "note this may fail if you don't have yum repo available"
    log_info "try downloading offline installation packages with bin/get_pkg first"
    yum install -y createrepo sshpass wget yum yum-utils epel-release
    yum install -y ansible
    exit 0
fi

#========================================#
# make sure repo home exists (/www) and clean
#========================================#
if [[ ! -d ${REPO_HOME} ]]; then
    log_info "${REPO_HOME} not found, create"
    mkdir -p ${REPO_HOME}
else
	# if repo home exists, remove repo with name 'pigsty'
	if [[ -d "${REPO_HOME}/${REPO_NAME}" ]]; then
		log_info "${REPO_HOME}/${REPO_NAME} exists, remove"
		rm -rf "${REPO_HOME:?}/${REPO_NAME:?}" "${REPO_HOME:?}/pigsty"
	fi
fi

#========================================#
# extract pkg.tgz
#========================================#
tar -xf ${PKG_PATH} -C ${REPO_HOME}
if [[ ${REPO_NAME} != "pigsty" ]]; then
    log_info "move ${REPO_HOME}/pigsty to ${REPO_HOME}/${REPO_NAME}"
fi


#========================================#
# manipulate existing repos
#========================================#
log_info "backup /etc/yum.repos.d/*.repo to /etc/yum.repos.d/backup/"
mkdir -p /etc/yum.repos.d/backup
mv -f /etc/yum.repos.d/*.repo /etc/yum.repos.d/backup/ 2> /dev/null || true

#========================================#
# write local file repo definition
#========================================#
touch /etc/yum.repos.d/backup/${REPO_NAME}.repo
log_info "create ${REPO_NAME}.repo"
cat >/etc/yum.repos.d/${REPO_NAME}.repo  <<-EOF
[${REPO_NAME}]
name=${REPO_NAME} \$releasever - \$basearch
baseurl=file://${REPO_HOME}/${REPO_NAME}/
enabled=1
gpgcheck=0
EOF

#========================================#
# yum install from local file repo
#========================================#
log_info "remake yum cache"
yum clean all
yum makecache
log_info "install ansible utils"
yum install -y createrepo sshpass wget yum unzip yum-utils
yum install -y ansible

#========================================#
# extract binaries to PIGSTY_HOME/files/bin
#========================================#
log_info "extract binaries to files/bin"
CACHE_DIR="${REPO_HOME:?}/${REPO_NAME:?}"
TARGET_DIR="${PIGSTY_HOME:?}/files/bin"
mkdir -p ${PIGSTY_HOME}/files/bin
${PIGSTY_HOME}/bin/get_node_exporter -t ${CACHE_DIR}  -v 1.1.2  -p ${TARGET_DIR}/node_exporter
${PIGSTY_HOME}/bin/get_pg_exporter   -t ${CACHE_DIR}  -v 0.3.2  -p ${TARGET_DIR}/pg_exporter
${PIGSTY_HOME}/bin/get_loki          -t ${CACHE_DIR}  -v 2.2.1  -p ${TARGET_DIR}
chown ${TARGET_DIR}/* -Rv --reference=${TARGET_DIR}


#========================================#
# install extra packages (if needed)
#========================================#
# if you already have full pkg.tgz , why not install meta packages at all?
# echo "[INFO] install additional meta packages"
# yum install -y nginx wget yum-utils yum createrepo sshpass
# yum install -y wget yum-utils ntp chrony tuned uuid lz4 vim-minimal make patch bash lsof wget unzip git readline zlib openssl
# yum install -y numactl grubby sysstat dstat iotop bind-utils net-tools tcpdump socat ipvsadm telnet tuned pv jq
# yum install -y python3 python3-psycopg2 python36-requests python3-etcd python3-consul
# yum install -y python36-urllib3 python36-idna python36-pyOpenSSL python36-cryptography
# yum install -y node_exporter consul consul-template etcd haproxy keepalived vip-manager
# yum install -y patroni patroni-consul patroni-etcd pgbouncer pgbadger pg_activity
# yum install -y grafana prometheus2 alertmanager nginx_exporter blackbox_exporter pushgateway
# yum install -y dnsmasq nginx ansible pgbadger polysh