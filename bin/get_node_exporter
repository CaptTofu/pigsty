#!/bin/bash
set -euo pipefail

#==============================================================#
# File      :   get_node_exporter
# Ctime     :   2021-04-21
# Mtime     :   2021-07-12
# Desc      :   Get Node Exporter From Github Release
# Path      :   bin/get_node_exporter
# Depend    :   curl
# Copyright (C) 2018-2021 Ruohang Feng
#==============================================================#

# color log util
__CN='\033[0m'    # no color
__CB='\033[0;30m' # black
__CG='\033[0;32m' # green
function log_info() {  printf "[${__CG} OK ${__CN}] ${__CG}$*${__CN}\n";   }
function log_hint()  { printf "${__CB}$*${__CN}\n"; }


#==============================================================#
# color log util
#==============================================================#
__CN='\033[0m'    # no color
__CB='\033[0;30m' # black
__CR='\033[0;31m' # red
__CG='\033[0;32m' # green
__CY='\033[0;33m' # yellow
__CB='\033[0;34m' # blue
__CM='\033[0;35m' # magenta
__CC='\033[0;36m' # cyan
__CW='\033[0;37m' # white
function log_info() {  printf "[${__CG} OK ${__CN}] ${__CG}$*${__CN}\n";   }
function log_warn() {  printf "[${__CY}WARN${__CN}] ${__CY}$*${__CN}\n";   }
function log_error() { printf "[${__CR}FAIL${__CN}] ${__CR}$*${__CN}\n";   }
function log_debug() { printf "[${__CB}HINT${__CN}] ${__CB}$*${__CN}\n"; }
function log_input() { printf "[${__CM} IN ${__CN}] ${__CM}$*\n=> ${__CN}"; }
function log_hint()  { printf "${__CB}$*${__CN}\n"; }
#==============================================================#

function get_node_exporter() {
    local tmpdir=/tmp
    local version=latest
    local path=${tmpdir}/node_exporter
    local remove=no

    # parse arguments
    while [ $# -gt 0 ]; do
        case $1 in
        -h|--help)
			cat <<-'EOF'
			NAME
			    get_node_exporter
			SYNOPSIS
			    download node_exporter from github release page
			    get_node_exporter  [-v|--version=latest]            # node_exporter version (latest by default)
			                       [-p|--path=/tmp/node_exporter]   # where to put node_exporter binary
			                       [-t|--tmpdir=/tmp]               # where to put tmp resource (or use cache)
			                       [-r|--remove]                    # force re-download and remove tarball
			                       [-h|--help]                      # print this message
			EXAMPLES
			    get_node_exporter                  # get latest node_exporter binary to /tmp/node_exporter
			    get_node_exporter  -v 1.1.2        # get specific version of node_exporter (1.1.2)
			    get_node_exporter  -p /usr/bin/    # download binary to specific path `/usr/bin/`
			    get_node_exporter  -r              # force re-download and remove tarball after download
			EOF
			exit 0;;
        -v|--version) version="$2" ; shift;;
        -p|--path) path="$2" ; shift;;
        -t|--tmpdir) tmpdir="$2" ; shift;;
        -r|--remove) remove="yes" ;;
        (--) shift; break;;
        (-*) log_error "$0: error - unrecognized option $1"; exit 1;;
        (*) break;;
        esac
        shift
    done

	# translate latest version into specific version with github API
	if [[ ${version} == "latest" ]]; then
		log_info "get latest version of node_exporter"
		version=$(curl --silent "https://api.github.com/repos/prometheus/node_exporter/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
		if [[ ${version} =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
			log_info "latest version of node_exporter is v${version}"
		else
		    log_error "fail to get latest node_exporter version from github: $version"
		    exit 1
		fi
	fi

    local filename="node_exporter-${version}.linux-amd64"
    local tarball="${filename}.tar.gz"
    local url="https://github.com/prometheus/node_exporter/releases/download/v${version}/${tarball}"

    if [[ ! -f ${tmpdir}/${tarball} || ${remove} == "yes" ]] ; then
        log_info "download node_exporter v${version} from ${url} to ${tmpdir}"
        curl -L ${url} -o ${tmpdir}/${tarball}
    else
    	log_hint "found tarball on ${tmpdir}, extract to ${path}"
    fi

    tar -xf ${tmpdir}/${tarball} -C ${tmpdir}
    mv -f "${tmpdir}/${filename}/node_exporter" ${path}
    rm -rf ${tmpdir:?}/${filename:?}                             # remove dir
    [ ${remove} == "yes" ] && rm -rf ${tmpdir:?}/${tarball:?}    # remove tarball if -r|--remove specified
}

get_node_exporter $@
