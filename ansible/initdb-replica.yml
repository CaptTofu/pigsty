#!/usr/bin/env ansible-playbook
---
#==============================================================#
# File      :   initdb-replica.yml
# Mtime     :   2020-06-01
# Desc      :   init cluster replica instance
# Path      :   playbooks/initdb-replica.yml
# Author    :   Vonng(fengruohang@outlook.com)
#==============================================================#


- name: Init Cluster Replicas
  gather_facts: false
  any_errors_fatal: true
  become: yes
  become_method: sudo
  vars:
    force: false

  # works on dynamic built group 'replica'
  hosts: replica
  tasks:
    ################################################################
    # PHASE 1: [check] replica instance precondition
    ################################################################
    - name: Check replica
      tags: [always, check_replica]
      block:

        # override these variable with -e
        - set_fact:
            repl_user={{ repl_user | default('replicator') }}
            repl_pass={{ repl_pass | default('replicator') }}
            mon_user={{ mon_user | default('dbuser_monitor') }}
            mon_pass={{ mon_pass | default('dbuser_monitor') }}
            biz_user={{ biz_user | default(cluster) }}
            biz_pass={{ biz_pass | default(cluster) }}
            biz_db={{ biz_db | default(cluster) }}
            hbaconf_path={{ hbaconf | default('files/postgres/pg_hba-{{ role }}.conf') | trim }}

        - name: Check replica node connectivity
          action: ping
        - name: Check replica postgres is installed with version {{ version }}
          shell: "[[ $(/usr/pgsql/bin/pg_ctl --version) == 'pg_ctl (PostgreSQL) {{ version }}'* ]]"



    ################################################################
    # PHASE 2: [clean] existing stuff
    ################################################################
    # this checking task is skipped if force id defined (via -e force=on)
    # otherwise, abort execution if postgres is running
    - name: Check replica not running (set force=on to skip)
      tags: [check_replica]
      shell: "ps aux | grep -v grep | grep -- '-D /pg/data' | grep pgsql || exit 0 && exit 1"
      when: not force

    - name: Cleanup postgresql replica
      tags: [clean_replica]
      block:
        - name: Stop running postgresql service
          ignore_errors: true
          systemd: name=postgres state=stopped enabled=no daemon_reload=yes
        - name: Stop running postgres manully if still exist
          become_user: postgres
          shell: |
            pg_exist=$(ps aux | grep -v grep | grep -- '-D /pg/data' | grep pgsql | wc -l)
            if (( $pg_exist==1 )); then
                /usr/pgsql/bin/pg_ctl -D /pg/data stop
            fi

        - name: Remove existing /pg/data directory
          file: path=/pg/data state=absent
        - name: Recreate /pg/data directory
          file: path=/pg/data state=directory owner=postgres group=postgres mode=0700



    ################################################################
    # PHASE 3: [initdb] clone database cluster from primary
    ################################################################
    # create pgpass for repl_user, mon_user, biz_user
    - name: Init replica data dir
      tags: [initdb_replica]
      block:
        - name: Create pgpass
          tags: [initdb_replica]
          copy:
            content: |
              *:*:*:{{ repl_user }}:{{ repl_pass }}
              *:*:*:{{ mon_user }}:{{ mon_pass }}
              *:*:{{ biz_db }}:{{ biz_user }}:{{ biz_pass }}
              # postgres://{{ repl_user }}:{{ repl_pass }}@:/postgres
              # postgres://{{ mon_user }}:{{ mon_pass }}@:/postgres
              # postgres://{{ biz_user }}:{{ biz_pass }}@:/{{ biz_db }}
            dest: /home/postgres/.pgpass
            owner: postgres
            group: postgres
            mode: 0600

        # check primary is available
        - name: Check replica connectivity to primary
          become_user: postgres
          command: psql -h {{ primary_ip }} -U {{ repl_user }} -d postgres -Atc 'SELECT 1;'

        # create basebackup from primary
        - name: Create basebackup from primary
          become_user: postgres
          command: /usr/pgsql/bin/pg_basebackup -h {{ primary_ip }} -U {{ repl_user }} -D /pg/data -Fp -Xs -Pv -R -c fast
          async: 0


    ################################################################
    # PHASE 4: [config] postgres
    ################################################################
    # use custome pg_hba.conf via ( override with -e pghba=/path/to/pg_hba.conf )
    - name: Setup pg_hba.conf
      tags: [config_replica]
      template: src={{ hbaconf_path }} dest=/pg/data/pg_hba.conf owner=postgres group=postgres mode=0600

    ################################################################
    # PHASE 4-2: [config] postgres replication source
    ################################################################
    - name: Setup replica replication source
      tags: [config_replica]
      lineinfile:
        path: /pg/data/postgresql.auto.conf
        regexp: "^primary_conninfo"
        line: "primary_conninfo = 'host={{ primary_ip }} port=5432  application_name=''{{ instance_name }}'' user=''{{ repl_user }}'' passfile=''/home/postgres/.pgpass'''"
        owner: postgres
        group: postgres
        mode: 0600



    ################################################################
    # PHASE 5: [launch] postgresql service
    ################################################################
    - name: Launch PostgreSQL service
      tags: [launch_replica]
      block:
        - name: Start postgres service
          systemd: name=postgres state=restarted enabled=yes daemon_reload=yes

        - name: Check Postgres launch success
          become_user: postgres
          command: /usr/pgsql/bin/pg_isready

        - name: Check business user / db connectivity
          become_user: postgres
          shell: psql -U {{ biz_user }} -d {{ biz_db }} -Atc 'SELECT 1;'
