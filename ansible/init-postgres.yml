#!/usr/bin/env ansible-playbook
---
#==============================================================#
# File      :   init-postgres.yml
# Mtime     :   2020-05-31
# Desc      :   install postgres and init environment
# Path      :   ansible/init-postgres.yml
# Author    :   Vonng(fengruohang@outlook.com)
# Note: This play assumes infra is already inited
#==============================================================#


- name: Init Postgres
  hosts: all
  become: yes
  gather_facts: yes
  vars:
    version: 12
    postgis_version: 30
    extensions: true
    postgis: true
    pgdg: false

  tasks:

    ################################################################
    # PHASE 1: create os user postgres (may already exists)
    ################################################################
    - name: Create postgres users
      tags: [user]
      block:
        - name: Create os group postgres
          group: name=postgres gid=256
        - name: Create os user postgres
          user: name=postgres group=postgres home=/home/postgres generate_ssh_key=yes


    ################################################################
    # PHASE 2: create postgres directories
    ################################################################
    - name: Create postgres directory
      tags: [dir]
      block:
        # this assumes /pg is mounted with ssd for database and /var/backups is mounted with hdd for backups
        - name: Create postgres directories
          file: path={{ item }} state=directory owner=postgres group=postgres mode=0700
          with_items:
            - /pg           # PGROOT
            - /var/backups  # PGBKUP
            - /pg/bin
            - /pg/log
            - /pg/conf
            - /pg/data
            - /pg/tmp
            - /var/backups/arcwal
            - /var/backups/backup
            - /var/backups/remote

        - name: Create links between pgroot and pgbkup
          file:
            src: '/var/backups/{{ item }}'
            dest: '/pg/{{ item }}'
            state: link
          loop:
            - arcwal
            - backup
            - remote


    ################################################################
    # PHASE 3: setup sudo privilege
    ################################################################
    - name: Setup sudo
      tags: [sudo]
      block:
        - name: Allow postgres systemctl nopass sudo
          copy:
            content: "postgres ALL=(ALL) NOPASSWD: ALL"
            dest: /etc/sudoers.d/postgres
            mode: 0440


    ################################################################
    # PHASE 4: setup ulimit
    ################################################################
    - name: Setup ulimit
      tags: [ulimit]
      block:
        - name: Allow postgres systemctl nopass sudo
          copy:
            dest: /etc/security/limits.d/postgres.conf
            mode: 0640
            content: |
              postgres    soft    nproc       65536
              postgres    hard    nproc       65536
              postgres    hard    nofile      65536
              postgres    soft    nofile      65536
              postgres    soft    stack       unlimited
              postgres    hard    stack       unlimited
              postgres    soft    core        unlimited
              postgres    hard    core        unlimited
              postgres    soft    memlock     2500000
              postgres    hard    memlock     2500000



    ################################################################
    # PHASE 5: setup pgdg
    ################################################################
    # -e pgdg=true will install pgdg explicitly
    - name: Install pgdg
      when: pgdg
      tags: [pgdg]
      yum: name="https://yum.postgresql.org/{{ version }}/redhat/rhel-{{ ansible_distribution_major_version }}Server-x86_64/pgdg-redhat-repo-latest.noarch.rpm"


    ################################################################
    # PHASE 6: install packages
    ################################################################
    - name: Install postgres packages
      tags: [install]
      block:
        - name: Enlisting postgres packages
          set_fact:
            package_list:
              - 'postgresql{{ version }}*'
              - pgbouncer
              - pg_exporter
            postgis_package_list:
              - postgis{{ postgis_version }}_{{ version }}
              - postgis{{ postgis_version }}_{{ version }}-client
              - postgis{{ postgis_version }}_{{ version }}-devel
              - postgis{{ postgis_version }}_{{ version }}-utils
              - pgrouting_{{ version }}
            extensions_package_list:
              - pg_repack{{ version }}
              - wal2json{{ version }}
              - pg_repack{{ version }}
              - pg_qualstats{{ version }}
              - pg_stat_kcache{{ version }}
              - pg_cron_{{ version }}
              - timescaledb_{{ version }}
              - pglogical_{{ version }}
        - name: Enlisting postgis packages
          when: postgis and version|int <= 12
          set_fact: package_list="{{ package_list + postgis_package_list }}"
        - name: Enlisting extension packages
          when: extensions and version|int <= 12
          set_fact: package_list="{{ package_list + extensions_package_list }}"
        - name: Print postgres packages
          debug: {var: package_list}
        - name: Install postgres package list
          yum: name={{ package_list }}
        - name: Make /usr/pgsql link
          file: src="/usr/pgsql-{{ version }}" dest=/usr/pgsql state=link
        - name: Add /usr/ppgsql to path
          copy:
            content: "export PATH=/usr/pgsql/bin:/pg/bin:$PATH"
            dest: /etc/profile.d/pgsql.sh


    ################################################################
    # PHASE 7: install service unit
    ################################################################
    - name: Install systemd unit
      tags: [systemd]
      block:
        - name: Copy systemd service file
          copy:
            dest: /usr/lib/systemd/system/postgres.service
            content: |
              [Unit]
              Description=PostgreSQL {{ version }} database server
              Documentation=https://www.postgresql.org/docs/{{ version }}/static/
              After=syslog.target
              After=network.target

              [Service]
              Type=notify
              User=postgres
              Group=postgres
              Environment=PGDATA=/pg/data
              OOMScoreAdjust=-1000
              Environment=PG_OOM_ADJUST_FILE=/proc/self/oom_score_adj
              Environment=PG_OOM_ADJUST_VALUE=0

              ExecStartPre=/usr/pgsql-{{ version }}/bin/postgresql-{{ version }}-check-db-dir ${PGDATA}
              ExecStart=/usr/pgsql-{{ version }}/bin/postmaster -D ${PGDATA}
              ExecReload=/bin/kill -HUP $MAINPID
              KillMode=mixed
              KillSignal=SIGINT
              TimeoutSec=0
              [Install]
              WantedBy=multi-user.target

        - name: Prepare postgres service
          systemd: name=postgres state=stopped enabled=no daemon_reload=yes


    ################################################################
    # PHASE 8: check installation
    ################################################################
    - name: Check postgres installation
      tags: [check]
      shell: |
        function check_installation() {
            local version=$1
            local errmsg=""
            [[ ! -z $(getent passwd postgres) ]] || errmsg="postgres user not exist"
            [[ ! -z $(getent group postgres) ]] || errmsg="postgres group not exist"
            [[ -d /pg && -d /var/backups ]] || errmsg="postgres dir not exist"
            [[ -f /etc/profile.d/pgsql.sh ]] || errmsg="pg path not set"
            [[ -f /etc/security/limits.d/postgres.conf ]] || errmsg="pg ulimit not set"
            [[ -f /etc/sudoers.d/postgres ]] || errmsg="pg sudoers not set"
            [[ -d /usr/pgsql-${version} ]] || errmsg="pg package not installed"
            [[ -L /usr/pgsql ]] || errmsg="pg soft link not created"
            [[ -x /usr/pgsql/bin/psql ]] || errmsg="client not installed"
            [[ -x /usr/pgsql/bin/pg_ctl ]] || errmsg="server not installed"
            [[ $(/usr/pgsql/bin/pg_ctl --version) == "pg_ctl (PostgreSQL) ${version}"* ]] || errmsg="version not match"
            [[ ! -z ${errmsg} ]] && echo $errmsg
            [[ -z ${errmsg} ]] && return 0 || return 1
        }
        check_installation {{ version }}
