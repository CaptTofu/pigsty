#!/usr/bin/env ansible-playbook
---
#==============================================================#
# File      :   node.yml
# Desc      :   init node for pigsty
# Ctime     :   2020-05-12
# Mtime     :   2022-12-10
# Path      :   node.yml
# Author    :   Ruohang Feng (rh@vonng.com)
# License   :   AGPLv3
#==============================================================#
- name: NODE
  hosts: all
  become: yes
  gather_facts: no
  roles:
    - { role: node_id       , tags: id       }  # get node identity (always)
    - { role: node          , tags: node     }  # prepare node for pigsty
    - { role: haproxy       , tags: haproxy  }  # init haproxy optional
    - { role: docker        , tags: docker   }  # init docker, optional
    - { role: node_monitor  , tags: monitor  }  # init node monitor


#---------------------------------------------------------------
# usage
#---------------------------------------------------------------
# 1. make sure you have nopass ssh & sudo access to target node
# 2. make sure you have defined these nodes in your inventory
# 3. run ./node.yml -l <selector> to finish node provisioning
#--------------------------------------------------------------
# node.yml -t id                    # print node identity
# node.yml -t monitor               # deploy and register node-exporter
# node.yml -t register_prometheus   # register node_exporter to prometheus
#
# bootstrap with another admin user:
# node.yml -t node_admin       # create admin user for nodes
# node.yml -t node_admin -k -K -e ansible_user=<another admin>
# ...
#--------------------------------------------------------------



#---------------------------------------------------------------
# node identity
#---------------------------------------------------------------
# nodename : optional, used as node identity, default to existing name
# node_cluster : optional, used as node identity, default to `nodes`
#
#  cls: node_cluster (explicit) > pg_cluster (when node_id_from_pg) > 'nodes'
#  ins: nodename (explicit) > pg_instance (when node_id_from_pg) > node.hostname
#
# you can overwrite node identity with pgsql identity on 1:1 deployment
# with option `node_id_from_pg: true`
#
# 1. node identity can be specified by nodename or node_cluster explicitly (override all)
# 2. if node identity is not specified and node_id_from_pg is set, it will use pg's instance identity if applicable
# 3. otherwise, node_cluster will fall back to `nodes` and nodename will fall back to node's current hostname
#---------------------------------------------------------------
...