#----------------------------------#
# cluster: pg-test (public demo)   #
#----------------------------------#
pg-test:                                # define the new 3-node cluster pg-test
  hosts:
    172.21.0.3:  {pg_seq: 1, pg_role: primary}   # primary instance, leader of cluster
    172.21.0.4:  {pg_seq: 2, pg_role: replica}   # replica instance, follower of leader
    172.21.0.16: {pg_seq: 3, pg_role: offline}   # offline instance, replica that allow offline access
  vars:
    pg_cluster: pg-test                 # define actual cluster name
    pg_version: 13                      # test postgresql 13 with pg-test cluster
    pg_users: [{name: test , password: test  ,pgbouncer: true ,roles: [dbrole_admin], comment: test user for test database cluster }]
    pg_databases: [{ name: test}]       # create a database and user named 'test'

    pg_services_extra: # extra services in addition to pg_services, array of service definition
      # standby service will route {ip|name}:5435 to sync replica's pgbouncer (5435->6432 standby)
      - name: standby                   # required, service name, the actual svc name will be prefixed with `pg_cluster`, e.g: pg-meta-standby
        src_ip: "*"                     # required, service bind ip address, `*` for all ip, `vip` for cluster `vip_address`
        src_port: 5435                  # required, service exposed port (work as kubernetes service node port mode)
        dst_port: pgbouncer             # optional, destination port, postgres|pgbouncer|<port_number>   , pgbouncer(6432) by default
        check_method: http              # optional, health check method: http is the only available method for now
        check_port: patroni             # optional, health check port: patroni|pg_exporter|<port_number> , patroni(8008) by default
        check_url: /sync                # optional, health check url path, /read-only?lag=0 by default
        check_code: 200                 # optional, health check expected http code, 200 by default
        selector: "[]"                  # required, JMESPath to filter inventory ()
        selector_backup: "[? pg_role == `primary`]"  # primary used as backup server for standby service (will not work because /sync for )
        haproxy: # optional, adhoc parameters for haproxy service provider (vip_l4 is another service provider)
          maxconn: 3000                 # optional, max allowed front-end connection
          balance: roundrobin           # optional, haproxy load balance algorithm (roundrobin by default, other: leastconn)
          default_server_options: 'inter 3s fastinter 1s downinter 5s rise 3 fall 3 on-marked-down shutdown-sessions slowstart 30s maxconn 3000 maxqueue 128 weight 100'

    pg_hba_rules_extra:

      - title: allow db intranet access with dbuser_batchload to test
        role: common
        rules:
          - host  test  dbuser_batchload      10.10.0.0/16     md5
