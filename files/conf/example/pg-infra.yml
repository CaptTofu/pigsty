#--------------------------------------------------------------#
# pg-infra (example database for cluster loading)
#--------------------------------------------------------------#
pg-infra:
  hosts:
    10.10.10.40: { pg_seq: 1, pg_role: primary }
    10.10.10.41: { pg_seq: 2, pg_role: replica , pg_offline_query: true }
  vars:
    pg_cluster: pg-infra
    pg_version: 13
    vip_address: 10.10.10.4
    pgbouncer_poolmode: session
    pg_hba_rules:
      - title: allow confluence jira gitlab eazybi direct access
        role: common
        rules:
          - host    jira       dbuser_jira         10.0.0.0/8        md5
          - host    gitlab     dbuser_gitlab       10.0.0.0/8        md5
          - host    confluence dbuser_confluence   10.0.0.0/8        md5
    pg_users:
      # infra user
      - { name: dbuser_hybridcloud, password: ssag-2xd, pgbouncer: true, roles: [ dbrole_readwrite ] }
      - { name: dbuser_confluence, password: mc2iohos , pgbouncer: true, roles: [ dbrole_admin ] }
      - { name: dbuser_gitlab, password: sdf23g22sfdd , pgbouncer: true, roles: [ dbrole_readwrite ] }
      - { name: dbuser_jira, password: sdpijfsfdsfdfs , pgbouncer: true, roles: [ dbrole_admin ] }

    pg_databases:
      # infra database
      - { name: hybridcloud , revokeconn: true, owner: dbuser_hybridcloud , schemas: [ k8s ], extensions: [ { name: postgis , schema: public } ], parameters: { search_path: k8s, public } , connlimit: 100 }
      - { name: confluence , revokeconn: true, owner: dbuser_confluence , connlimit: 100 }
      - { name: gitlab , revokeconn: true, owner: dbuser_gitlab, connlimit: 100 }
      - { name: jira , revokeconn: true, owner: dbuser_jira , connlimit: 100 }

    pg_services:                        # extra services in addition to pg_default_services, array of service definition
      # standby service will route {ip|name}:5435 to sync replica's pgbouncer (5435->6432 standby)
      - name: standby                   # required, service name, the actual svc name will be prefixed with `pg_cluster`, e.g: pg-meta-standby
        src_ip: "*"                     # required, service bind ip address, `*` for all ip, `vip` for cluster `vip_address`
        src_port: 5435                  # required, service exposed port (work as kubernetes service node port mode)
        dst_port: pgbouncer             # optional, destination port, postgres|pgbouncer|<port_number>   , pgbouncer(6432) by default
        check_method: http              # optional, health check method: http is the only available method for now
        check_port: patroni             # optional, health check port: patroni|pg_exporter|<port_number> , patroni(8008) by default
        check_url: /sync                # optional, health check url path, /read-only?lag=0 by default
        check_code: 200                 # optional, health check expected http code, 200 by default
        selector: "[]"                  # required, JMESPath to filter inventory ()
        selector_backup: "[? pg_role == `primary`]"  # primary used as backup server for standby service (will not work because /sync for )
        haproxy:                        # optional, adhoc parameters for haproxy service provider (vip_l4 is another service provider)
          maxconn: 3000                 # optional, max allowed front-end connection
          balance: roundrobin           # optional, haproxy load balance algorithm (roundrobin by default, other: leastconn)
          default_server_options: 'inter 3s fastinter 1s downinter 5s rise 3 fall 3 on-marked-down shutdown-sessions slowstart 30s maxconn 3000 maxqueue 128 weight 100'