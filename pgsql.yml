#!/usr/bin/env ansible-playbook
---
#==============================================================#
# File      :   pgsql.yml
# Desc      :   init postgres cluster/instance
# Ctime     :   2020-05-12
# Mtime     :   2022-12-07
# Path      :   pgsql.yml
# Author    :   Ruohang Feng (rh@vonng.com)
# License   :   AGPLv3
#==============================================================#


#--------------------------------------------------------------#
# Available Sub Tasks
#--------------------------------------------------------------#
# pg_clean      : cleanup existing postgres if necessary
# pg_dbsu       : setup os user sudo for postgres dbsu
# pg_install    : install postgres packages & extensions
#   ^--- pg_pkg              : install postgres related packages
#   ^--- pg_extension        : install postgres extensions only
#   ^--- pg_path             : link pgsql version bin to /usr/pgsql
#   ^--- pg_env              : add pgsql bin to system path
# pg_dir        : create postgres directories and setup fhs
# pg_util       : copy utils scripts, setup alias and env
#   ^--- pg_bin              : sync postgres util scripts /pg/bin
#   ^--- pg_alias            : write /etc/profile.d/pg-alias.sh
#   ^--- pg_psql             : create psqlrc file for psql
#   ^--- pg_dummy            : create dummy placeholder file
# patroni       : bootstrap postgres with patroni
#   ^--- pg_config           : generate patroni config
#   ^--- pg_cert             : issues certificates for postgres
#   ^--- pg_launch           : launch postgres primary & replicas
# pg_user       : provision postgres business users
#   ^--- pg_user_config      : render create user sql
#   ^--- pg_user_create      : create user on postgres
# pg_db         : provision postgres business databases
#   ^--- pg_db_config        : render create database sql
#   ^--- pg_db_create        : create database on postgres
# pgbackrest    : create a backup repo on pgsql primary
# pgbouncer     : deploy a pgbouncer sidecar with postgres
#   ^--- pgbouncer_clean     : cleanup existing pgbouncer
#   ^--- pgbouncer_dir       : create pgbouncer directories
#   ^--- pgbouncer_config    : generate pgbouncer config
#         ^--- pgbouncer_svc : generate pgbouncer systemd config
#         ^--- pgbouncer_ini : generate pgbouncer main config
#         ^--- pgbouncer_hba : generate pgbouncer hba config
#         ^--- pgbouncer_db  : generate pgbouncer database config
#         ^--- pgbouncer_user : generate pgbouncer user config
#   ^--- pgbouncer_launch    : launch pgbouncer pooling service
#   ^--- pgbouncer_reload    : reload pgbouncer config
# pg_vip        : bind vip to pgsql primary with vip-manager
#   ^--- pg_vip_config       : generate config for vip-manager
#   ^--- pg_vip_launch       : launch vip-manager to bind vip
# pg_service    : expose pgsql service with haproxy
#   ^--- pg_service_conf     : generate local haproxy config for pg services
#   ^--- pg_service_reload   : expose postgres services with haproxy
# pg_exporter   : expose pgsql service with haproxy
#   ^--- pg_exporter_config  : config pg_exporter & pgbouncer_exporter
#   ^--- pg_exporter_launch  : launch pg_exporter
#   ^--- pgbouncer_exporter_launch : launch pgbouncer exporter
# pg_register   : register postgres to pigsty infrastructure
#   ^--- register_prometheus : register pg as prometheus monitor targets
#   ^--- register_grafana    : register pg database as grafana datasource
#--------------------------------------------------------------#
- name: PGSQL INIT
  become: yes
  hosts: all
  gather_facts: no
  roles:
    - { role: node_id , tags: node-id  } # get node identity (always)
    - { role: pg_id   , tags: pg-id    } # get pgsql identity (always)
    - { role: pgsql   , tags: pgsql    } # init postgres cluster/instance


#==============================================================#
# Playbook : Init PGSQL Cluster/Instance on Pigsty Node
#==============================================================#
#  Warning: You have to run this playbook on provisioned nodes
#  which should be provisioned by ./node.yml playbook ahead
#  you can run both at once with bin/pg-add <cluster|ip>
#    bin/pg-add pg-test
#
#  Init cluster `pg-test`
#     pgsql.yml -l pg-test
#
#  Init instance (10.10.10.13) among cluster `pg-test`
#     pgsql.yml -l 10.10.10.13
#
#  Re-init postgres instance only on node 10.10.10.13
#     pgsql.yml -l 10.10.10.13 --tags=postgres
#
#  Re-init pgbouncer instance only on node 10.10.10.13
#     pgsql.yml -l 10.10.10.13 --tags=pgbouncer
#
#  Re-deploy monitor component for postgres/pgbouncer
#     pgsql.yml --tags=pg_exporter
#
#  Refresh HBA rules
#     pgsql.yml --tags=pg_hba   (or bin/reloadhba <cluster>)
##    pgsql.yml --tags=pgb_hba  (or bin/reloadhba <cluster>)
#
#  Register cluster/instance to infrastructure
#     pgsql.yml --tags=register             # register all
#     pgsql.yml --tags=register_prometheus  # monitor target
#     pgsql.yml --tags=register_grafana     # pgsql datasource
#==============================================================#
...