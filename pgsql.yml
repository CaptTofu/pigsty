#!/usr/bin/env ansible-playbook
---
#==============================================================#
# File      :   pgsql.yml
# Mtime     :   2020-05-12
# Mtime     :   2021-03-20
# Desc      :   init postgres cluster/instance
# Path      :   pgsql.yml
# Copyright (C) 2018-2022 Ruohang Feng (rh@vonng.com)
#==============================================================#


#==============================================================#
# Playbook : Init PGSQL Cluster/Instance on Pigsty Node
#==============================================================#
#  Warning: You have to run this playbook on provisioned nodes
#  which should be provisioned by ./nodes.yml playbook ahead
#  you can run both at once with bin/createpg <cluster|ip>
#    bin/createpg pg-test
#
#  Init cluster `pg-test`
#     pgsql.yml -l pg-test
#
#  Init instance (10.10.10.13) among cluster `pg-test`
#     pgsql.yml -l 10.10.10.13
#
#  Re-init postgres instance only on node 10.10.10.13
#     pgsql.yml -l10.10.10.13 --tags=postgres
#
#  Re-deploy monitor component
#     pgsql.yml --tags=monitor
#
#  Replace exporter with new binary version
#     pgsql.yml --tags=monitor -e exporter_install=binary
#
#  Refresh (haproxy) services
#     pgsql.yml --tags=service (or bin/reloadha <cluster>)
#
#  Refresh HBA rules
#     pgsql.yml --tags=pg_hba  (or bin/reloadhba <cluster>)
#
#  Register cluster/instance to infrastructure
#     pgsql.yml --tags=register             # register all
#     pgsql.yml --tags=register_consul      # service discovery
#     pgsql.yml --tags=register_prometheus  # monitor target
#     pgsql.yml --tags=register_grafana     # pgsql datasource
#     pgsql.yml --tags=register_nginx       # haproxy admin page
#==============================================================#

#---------------------------------------------------------------
# PG IDENTITY
#---------------------------------------------------------------
- name: PGSQL Identity
  hosts: all
  gather_facts: no
  tags: [ always, pg-id ]
  connection: local
  become: no
  tasks:

    # fetch cluster inventory variable from hostvars of corresponding cluster
    - name: Gather pgsql basic facts
      set_fact:
        pg_meta={{ hostvars| json_query(cluster_query) }}
        pg_instance={{ pg_cluster }}-{{ pg_seq }}
        pg_service={{ pg_cluster }}-{{ pg_role }}
      vars: { cluster_query: "[@.*][0][?pg_cluster=='{{ pg_cluster }}']" }

    # calculate basic cluster facts from pg_meta
    - name: Build pgsql basic facts
      set_fact:
        pg_is_primary={{ pg_role == 'primary' }}
        pg_cluster_size={{ pg_meta | json_query("[].inventory_hostname") | unique | length }}
        pg_cluster_members={{ pg_meta | json_query("[].inventory_hostname") | unique | sort }}
        pg_cluster_primary_list={{ pg_meta | json_query("[?pg_role=='primary'].inventory_hostname") | unique | sort }}
        pg_cluster_replicas={{ pg_meta | json_query("[?pg_role!='primary'].inventory_hostname") | unique | sort }}
        pg_seq_next={{ pg_meta | json_query('max([].pg_seq)') | int + 1 }}
        pg_cluster_primary={{ (pg_meta | json_query("[?pg_role=='primary'].inventory_hostname") | unique | sort)[0] }}
        pg_cluster_primary_id={{ (pg_meta | json_query("[?pg_role=='primary'].pg_seq") | unique | sort)[0] }}

    # print instance pre-flight check summary
    - name: Show pgsql identity summary
      debug:
        msg: "{% if pg_cluster_primary_list|length < 1 %}[WARNING] NO PRIMARY FOR {{ pg_cluster }}  [WARNING]{% endif %}
          {% if pg_cluster_primary_list|length > 1 %}[WARNING] MULTIPLE PRIMARY FOR {{ pg_cluster }} : {{ pg_cluster_primary }} [WARNING]{% endif %}
          [{{ pg_role }}]  {{ pg_instance }} @ {{ inventory_hostname }} , 
          {% if pg_role == 'primary' %}{% if pg_upstream is defined %}STANDBY LEADER @ {{ pg_instance }}{% else %}CLUSTER LEADER @ {{ pg_instance }}{% endif %}
          {% else %}{% if pg_upstream is defined %}REPLICATE UPSTREAM {{ pg_upstream }} -> {{ pg_instance }} {% else %}REPLICATE PRIMARY {{ pg_cluster }}-{{ pg_cluster_primary_id }} -> {{ pg_instance }}{% endif %}{% endif %}
          , PGURL = postgres://{{ inventory_hostname }}:{{ pg_port }}/postgres"


#---------------------------------------------------------------
# PG INIT
#---------------------------------------------------------------
# init postgres cluster/instance
- name: Pgsql Init
  become: yes
  hosts: all
  gather_facts: no
  tags: pg-init
  roles:

    - role: postgres        # init postgres pgbouncer patroni
      tags: postgres

    - role: service         # init service , haproxy , vip
      tags: service

    - role: pg_exporter     # init monitor exporters
      tags: pg-exporter

    - role: pg_register     # register postgres cluster/instance to infra
      tags: pg-register

#---------------------------------------------------------------
...
