#!/usr/bin/env ansible-playbook
---
#==============================================================#
# File      :   pgsql-createuser.yml
# Ctime     :   2021-02-27
# Mtime     :   2022-11-05
# Desc      :   create user/role on existing cluster
# Path      :   pgsql-createuser.yml
# Deps      :   templates/pg-user.sql
# Copyright (C) 2018-2022 Ruohang Feng (rh@vonng.com)
#==============================================================#


#==============================================================#
# How to create new user/role on existing postgres cluster ?   #
#==============================================================#
#  1.  Define new user/role in inventory (cmdb or config)
#      `all.children.<pg_cluster>.vars.pg_users[i]`
#  2.  Execute this playbook on target cluster with arg pg_user
#      `pgsql-createuser.yml -l <pg_cluster> -e pg_user=<user.name>
#  3.  The playbook execution can be simplified by wrapper script
#      bin/createuser <pg_cluster> <user.name>
#
#  This playbook will:
#   1. create user sql definition on `/pg/tmp/pg-user-{{ user.name }}.sql`
#   2. execute database creation/update sql on cluster leader instance
#   3. update /etc/pgbouncer/userlist.txt and reload pgbouncer if necessary
#=============================================================================#
- name: create postgres user
  become: yes
  hosts: all
  gather_facts: no
  vars:

    # (IMPORTANT): SET OR PASS CLI-ARG: `-e pg_user=<user.name>`
    # pg_user: dbuser_meta
    # Or use shortcuts: bin/createuser <cluster> <username>

  tasks:
    #------------------------------------------------------------------------------
    # pre-flight check: validate pg_user and user definition
    # ------------------------------------------------------------------------------
    - name: preflight
      tags: preflight
      connection: local
      block:

        - name: validate pg_user
          assert:
            that:
              - pg_user is defined
              - pg_user != ''
              - pg_user != 'postgres'
            fail_msg: variable 'pg_user' should be specified to create target user

        - name: get user definition
          set_fact:
            pg_user_definition={{ pg_users | json_query(pg_user_definition_query) }}
          vars:
            pg_user_definition_query: "[?name=='{{ pg_user }}'] | [0]"

        - name: validate user definition
          assert:
            that:
              - pg_user_definition is defined
              - pg_user_definition != None
              - pg_user_definition != ''
              - pg_user_definition != {}
            fail_msg: user definition for {{ pg_user }} should exists in pg_users

        - debug:
            msg: "{{ pg_user_definition }}"

    #------------------------------------------------------------------------------
    # Create user on cluster leader (inventory pg_role == 'primary')
    #------------------------------------------------------------------------------
    # create user according to user definition
    - include_tasks: roles/postgres/tasks/createuser.yml
      vars: { user: "{{ pg_user_definition }}" }

    #------------------------------------------------------------------------------
    # Reload Pgbouncer if Necessary (among entire cluster)
    #------------------------------------------------------------------------------
    - name: reload pgbouncer to add user
      when: pg_user_definition.pgbouncer is defined and pg_user_definition.pgbouncer|bool
      tags: pgbouncer_reload
      systemd: name=pgbouncer state=reloaded enabled=yes daemon_reload=yes

...