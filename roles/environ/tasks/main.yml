---
#--------------------------------------------------------------#
# Create Directories
#--------------------------------------------------------------#
- name: Create pigsty directories
  become: yes
  tags: environ_dirs
  block:

    - name: Create pigsty resource dirs on /etc/pigsty
      file: path={{ item }} state=directory owner=root
      with_items:
        - /etc/pigsty
        - /etc/pigsty/playbooks
        - /etc/pigsty/dashboards
        - /etc/pigsty/datasources


#--------------------------------------------------------------#
# Allow meta admin initiate patronictl commands
#--------------------------------------------------------------#
- name: Create patronictl resource
  become: yes
  tags: environ_patronictl
  copy:
    dest: /etc/pigsty/patronictl.yml
    mode: 0644
    content: |
      ---
      namespace: /pg/          # namespace

      # - dcs - #
      {% if dcs_type == 'consul' %}
      consul:
        host: 127.0.0.1:8500
        consistency: default         # default|consistent|stale
      {% endif %}

      # - ctl - #
      ctl:
        optional:
          insecure: true
          # cacert: '/path/to/ca/cert'
          # certfile: '/path/to/cert/file'
          # keyfile: '/path/to/key/file'


#--------------------------------------------------------------#
# Make sure ssh credential exists (id_rsa.pub)
#--------------------------------------------------------------#
- name: Guarentee admin ssh crendential exists
  become: no
  ignore_errors: true
  tags: environ_ssh
  block:
    - name: Get current username
      command: whoami
      changed_when: false
      register: remote_username

    - name: Create admin user ssh key pair if not exists
      user:
        name: "{{ remote_username.stdout }}"
        generate_ssh_key: yes


#--------------------------------------------------------------#
# Setup pgpass & pg_service
#--------------------------------------------------------------#
- name: Setup postgres pass and service
  become: no
  tags: environ_pgpass
  block:
    - name: Write default user credential to pgpass
      lineinfile: dest=~/.pgpass state=present create=yes mode=0600 line={{ item }}
      with_items:
        - "*:*:*:{{ pg_replication_username }}:{{ pg_replication_password }}"
        - "*:*:*:{{ pg_monitor_username }}:{{ pg_monitor_password }}"
        - "*:*:*:{{ pg_admin_username }}:{{ pg_admin_password }}"

    - name: Write default meta service to pg_service
      tags: environ_pgpass
      copy:
        dest: ~/.pg_service.conf
        mode: '0600'
        content: |
          [meta]
          host=127.0.0.1
          port=5432
          dbname=meta
          user={{ pg_admin_username }}
          password={{ pg_admin_password }}


#--------------------------------------------------------------#
# Setup envrion_vars
#--------------------------------------------------------------#
- name: Setup postgres pass and service
  become: no
  tags: environ_vars
  block:

    # create ~/.pigsty bash file
    - name: Set environment for admin user
      copy:
        dest: ~/.pigsty
        mode: 0700
        content: |
          # set default database for postgres
          export PGUSER={{ pg_admin_username }}
          export PGSERVICE="meta"
          export METADB_URL="service=meta"

          # passing environ for application
          export GRAFANA_ENDPOINT={{ grafana_endpoint }}
          export GRAFANA_USERNAME={{ grafana_admin_username }}
          export GRAFANA_PASSWORD={{ grafana_admin_password }}

          # passing external domain names
          export NGINX_UPSTREAM_HOME={{ nginx_upstream | json_query('[?name==`home`].domain') | first }}
          export NGINX_UPSTREAM_CONSUL={{ nginx_upstream | json_query('[?name==`consul`].domain') | first }}
          export NGINX_UPSTREAM_PROMETHEUS={{ nginx_upstream | json_query('[?name==`prometheus`].domain') | first }}
          export NGINX_UPSTREAM_ALERTMANAGER={{ nginx_upstream | json_query('[?name==`alertmanager`].domain') | first }}
          export NGINX_UPSTREAM_GRAFANA={{ nginx_upstream | json_query('[?name==`grafana`].domain') | first }}

          # export PIGSTY_HOME if exists on home dir
          if [[ -d ~/pigsty ]]; then
              export PIGSTY_HOME="${HOME}/pigsty"
          fi
          if [[ -d /etc/pigsty ]]; then
              export PIGSTY_DASHBOARD_DIR=/etc/pigsty/dashboards
              export PIGSTY_DATASOURCE_DIR=/etc/pigsty/datasource
              export PIGSTY_PLAYBOOK_DIR=/etc/pigsty/playbooks
          fi

          # pglog analysis shortcuts
          alias pglog="psql service=meta -AXtwc 'TRUNCATE pglog.sample CASCADE; COPY pglog.sample14 FROM STDIN CSV;'"
          alias pglog12="psql service=meta -AXtwc 'TRUNCATE pglog.sample CASCADE; COPY pglog.sample12 FROM STDIN CSV;'"
          alias pglog13="psql service=meta -AXtwc 'TRUNCATE pglog.sample CASCADE; COPY pglog.sample13 FROM STDIN CSV;'"
          alias pglog14="psql service=meta -AXtwc 'TRUNCATE pglog.sample CASCADE; COPY pglog.sample14 FROM STDIN CSV;'"

          ### default: get pgsql csvlog (localhost @ today)
          function catlog(){ # getlog <ip|host> <date:YYYY-MM-DD>
              local node=${1-'127.0.0.1'}
              local today=$(date '+%Y-%m-%d')
              local ds=${2-${today}}
              ssh -t "${node}" "sudo cat /pg/data/log/postgresql-${ds}.csv"
          }


    # load ~/.pigsty in ~/.bashrc
    - name: Enable environment for admin user
      lineinfile:
        dest: ~/.bashrc
        state: present
        create: yes
        mode: 0644
        line: '[ -f ~/.pigsty ] && . ~/.pigsty'


#--------------------------------------------------------------#
# Setup cmdb
#--------------------------------------------------------------#
# TODO: cmdb init

...