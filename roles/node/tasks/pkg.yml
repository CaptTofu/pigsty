---
#--------------------------------------------------------------#
# Install node repo (public or local)                [node_repo]
#--------------------------------------------------------------#
- name: setup node repo
  tags: node_repo
  block:

    # remove existing repos to /etc/yum.repos.d/backup
    - name: remove and backup existing repo file
      when: node_repo_remove|bool
      shell: |
        mkdir -p /etc/yum.repos.d/backup ; mv -f /etc/yum.repos.d/*.repo /etc/yum.repos.d/backup/; true

    # install local repo from url (default behaviour)
    - name: add local repo file
      when: node_repo_method == 'local' or node_repo_method == 'both'
      get_url:
        url: "{{ item|replace('${admin_ip}', admin_ip) }}"
        dest: /etc/yum.repos.d/{{ item | basename }}
      with_items: "{{ node_repo_local_urls }}"

    # install public repo (use this if you have public internet access)
    - name: add public upstream repo file
      copy:
        dest: /etc/yum.repos.d/{{ item.name }}.repo
        content: |
          [{{ item.name }}]
          name = {{ item.description }} $releasever - $basearch
          {% if region in item.baseurl and item.baseurl[region] != '' %}
          baseurl = {{ item.baseurl[region] | replace('$releasever', os_version|string )  }}
          {% else %}
          baseurl = {{ item.baseurl.default | replace('$releasever', os_version|string )  }}
          {% endif %}
          gpgcheck = 0
          enabled = 1
          {% if os_version|int >= 8 %}
          module_hotfixes=1
          {% endif %}
      when: (node_repo_method == 'public' or node_repo_method == 'both') and os_version|int in item.releases and item.module in repo_modules.split(',')
      with_items: "{{ repo_upstream }}"



#--------------------------------------------------------------#
# Install packages                                    [node_pkg]
#--------------------------------------------------------------#
- name: install node packages
  tags: node_pkg
  block:

    - name: install default node packages
      environment: "{{ proxy_env | default({}) }}"
      yum: name={{ item }} disable_gpg_check=true
      with_items: "{{ node_default_packages }}"

    - name: install extra node packages
      environment: "{{ proxy_env | default({}) }}"
      yum: name={{ item }} disable_gpg_check=true
      with_items: "{{ node_packages }}"

    - name: install keepalived if enabled
      when: vip_cluster is defined and vip_cluster != ''
      environment: "{{ proxy_env | default({}) }}"
      yum: name={{ item }} disable_gpg_check=true
      with_items: [ keepalived, keepalived_exporter ]

...