---
#------------------------------------------------------------------------------
# Install node repo (public or local)
#------------------------------------------------------------------------------
- name: setup node repo
  tags: node_repo
  block:

    # remove existing repos to backup dir
    - name: remove and backup existing repo file
      when: node_repo_remove|bool
      shell:
        warn: no
        cmd: mkdir -p /etc/yum.repos.d/backup ; mv -f /etc/yum.repos.d/*.repo /etc/yum.repos.d/backup/; true

    # install public repo (use this if you have public internet access)
    - name: add public upstream repo
      when: node_repo_method == "public"
      yum_repository: "{{ item }}"
      with_items: "{{ repo_upstreams }}"

    # install local repo from url (default behaviour)
    - name: add local repo file
      when: node_repo_method == "local"
      get_url:
        url: "{{ item }}"
        dest: /etc/yum.repos.d/{{ item | basename }}
      with_items: "{{ node_repo_local_urls }}"


#------------------------------------------------------------------------------
# Install packages
#------------------------------------------------------------------------------
- name: install node packages
  tags: node_pkg
  block:

    - name: install default node packages
      environment: "{{ proxy_env | default({}) }}"
      yum: name={{ item }} disable_gpg_check=true
      with_items: "{{ node_packages_default }}"

    - name: install extra node packages
      environment: "{{ proxy_env | default({}) }}"
      yum: name={{ item }} disable_gpg_check=true
      with_items: "{{ node_packages }}"

    - name: install infra node packages
      when: inventory_hostname in groups["infra"]
      environment: "{{ proxy_env | default({}) }}"
      yum: name={{ item }} disable_gpg_check=true
      with_items: "{{ node_packages_meta|default([]) }}"


#------------------------------------------------------------------------------
# Install Python Packages with pip3
#------------------------------------------------------------------------------
- name: install python pip packages
  tags: node_pip
  when: inventory_hostname in groups["infra"] and node_packages_meta_pip != '' and nginx_enabled|bool
  ignore_errors: yes
  environment: "{{ proxy_env | default({}) }}"
  shell: |
    #!/bin/bash
    PYTHON_BIN="$(which python3)"
    PYTHON_DIR="{{ nginx_home }}/{{ repo_name }}/python"
    OS_RELEASE=$(rpm -q --qf "%{VERSION}" $(rpm -q --whatprovides redhat-release) | grep -o '^[^.]\+')
    # python3 & python3-pip is installed 
    if [ ${OS_RELEASE} -ge 9 ]; then
        PYTHON_BIN="$(which python3.9)"
    elif [ ${OS_RELEASE} -ge 8 ]; then
        PYTHON_BIN="$(which python3.8)"
    elif [ ${OS_RELEASE} -ge 7 ]; then
        PYTHON_BIN="$(which python3.6)"
    else
        PYTHON_BIN="$(which python3)"
    fi
    
    mkdir -p ${PYTHON_DIR}; cd ${PYTHON_DIR}
    if ! compgen -G ${PYTHON_DIR}/pip*.whl ; then
        echo "f============================fuck"
        ${PYTHON_BIN} -m pip install --upgrade pip
        ${PYTHON_BIN} -m pip download pip
        ${PYTHON_BIN} -m pip download {{ node_packages_meta_pip }}
    fi
    ${PYTHON_BIN} -m pip install ${PYTHON_DIR}/pip* || /bin/true
    ${PYTHON_BIN} -m pip install ${PYTHON_DIR}/*    || /bin/true

...