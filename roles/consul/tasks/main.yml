---
#------------------------------------------------------------------------------
# Check consul
#------------------------------------------------------------------------------
- name: Check existing consul
  tags: consul_check
  block:

    #--------------------------------------------------------------------------
    # check consul exists
    #--------------------------------------------------------------------------
    - name: Check for existing consul
      command: 'ss -tp state listening sport = :8500'
      register: check_consul_port_result

    - name: Consul exists flag fact set
      set_fact:
        consul_exists: "{{ 'consul' in check_consul_port_result.stdout }}"

    #--------------------------------------------------------------------------
    # skip or abort if dcs already exists
    #--------------------------------------------------------------------------
    # when any running instance exists, abort play in two cases:
    # 1. consul_safeguard = true          (global flag to prevent accidentally purge)
    # 2. consul_clean == 'abort'
    - name: Abort due to consul exists
      when: consul_exists and (consul_safeguard or consul_clean == 'abort')
      any_errors_fatal: true
      fail: msg="Abort because consul instance already exists and consul_clean=abort"

    - name: Skip due to consul exists
      when: consul_exists and consul_clean == 'skip'
      meta: end_host

#------------------------------------------------------------------------------
# Clean consul
#------------------------------------------------------------------------------
- name: Clean existing consul
  tags: consul_clean
  block:
    #--------------------------------------------------------------------------
    # purge dcs
    #--------------------------------------------------------------------------
    # dangerous: (it will remove consul data!)
    - name: Clean existing consul instance
      when: not consul_safeguard and consul_exists and consul_clean == 'clean' # DANGEROUS!
      debug:
        msg: "[DANGEROUS] running instance {{ inventory_hostname }} will be purged!"

    - name: Stop any running consul instance
      script: stop_consul.sh

    - name: Remove existing consul dir
      file: path={{ item }} state=absent
      with_items:
        - /etc/consul.d
        - "{{ consul_data_dir }}"

    - name: Recreate consul dir
      file: path={{ item }} state=directory owner=consul group=consul mode=0775
      with_items:
        - /etc/consul.d
        - "{{ consul_data_dir }}"



#------------------------------------------------------------------------------
# Install consul
#------------------------------------------------------------------------------
- name: Make sure consul is installed
  tags: consul_install
  package: name=consul state=present


#------------------------------------------------------------------------------
# Config consul
#------------------------------------------------------------------------------
- name: Determine dcs node name
  tags: consul_config
  block:
    # for dcs servers, always use dcs_servers keys as node name
    - name: Make sure consul dir exists
      file: path={{ consul_data_dir }} mode=0700 state=directory owner=consul

    # for dcs servers, always use dcs_servers keys as node name
    - name: Get dcs server node names
      connection: local
      when: inventory_hostname in dcs_servers.values()
      set_fact:
        dcs_nodename={{ (dcs_servers|dict2items|items2dict(key_name='value', value_name='key'))[inventory_hostname] }}
        dcs_role=server
    # for dcs agents, use nodename if defined first
    - name: Get dcs node name from var nodename
      when: (dcs_nodename is not defined or dcs_nodename == '') and nodename is defined
      connection: local
      set_fact: dcs_nodename={{ nodename }}

    # if nodename is not defined , use hostname instead
    - name: Fetch hostname as dcs node name
      when: dcs_nodename is not defined or dcs_nodename == ''
      shell: echo $HOSTNAME
      register: hostname_result
    - name: Get dcs name from hostname
      when: dcs_nodename is not defined or dcs_nodename == ''
      connection: local
      set_fact: dcs_nodename={{ hostname_result.stdout }}

    # remove hcl format config
    - name: Make sure consul hcl absent
      file: path=/etc/consul.d/consul.hcl state=absent

    # render consul configs
    - name: Copy /etc/consul.d/consul.json
      template: src=consul.json.j2 dest=/etc/consul.d/consul.json mode=0644 owner=consul group=consul

    # config consul
    - name: Copy consul agent service
      copy: src=consul.service dest=/usr/lib/systemd/system/consul.service


    #------------------------------------------------------------------------------
    # register consul service
    #------------------------------------------------------------------------------
    - name: Render consul node meta
      tags: consul_meta
      when: dcs_type == 'consul'
      block:
        - name: Copy consul node-meta definition
          copy:
            dest: /etc/consul.d/node-meta.json
            owner: consul
            mode: 0644
            content: |
              {
                "node_meta": {
                  "cluster": "{{ node_cluster|default('nodes') }}",
                  "instance": "{{ dcs_nodename }}"
                }
              }

        - name: Restart consul to load new node-meta
          systemd: name=consul state=restarted



#------------------------------------------------------------------------------
# Launch consul server first
#------------------------------------------------------------------------------
- name: Setup consul server
  tags: consul_server
  when: inventory_hostname in dcs_servers.values()
  throttle: 1                                 # setup server one by one
  block:
    # determine quorum
    - name: Get dcs bootstrap expect quroum
      set_fact: consul_bootstrap_expect={{ ((dcs_servers.values() | length / 2)|round(0, 'floor') + 1)|int }}

    # write server specific configuration
    - name: Copy consul server service unit
      template: src=consul-server.json.j2 dest=/etc/consul.d/consul-server.json mode=0644 owner=consul group=consul

    # launch consul
    - name: Launch consul server service
      systemd: name=consul state=restarted enabled=yes daemon_reload=yes

    # wait consul online
    - name: Wait for consul server online
      wait_for: host=127.0.0.1 port=8500 state=started timeout=30


#------------------------------------------------------------------------------
# Launch consul agent
#------------------------------------------------------------------------------
- name: Setup consul agent
  tags: consul_agent
  when: inventory_hostname not in dcs_servers.values()
  block:
    # launch consul
    - name: Launch consul agent service
      systemd: name=consul state=restarted enabled=yes daemon_reload=yes

    # wait consul online
    - name: Wait for consul agent online
      wait_for: host=127.0.0.1 port=8500 state=started timeout=30

...
