---
#------------------------------------------------------------------------------
# Check consul
#------------------------------------------------------------------------------
- name: Check existing consul
  tags: consul_check
  block:

    #--------------------------------------------------------------------------
    # check consul exists
    #--------------------------------------------------------------------------
    - name: Check for existing consul
      command: 'ss -tp state listening sport = :8500'
      register: check_consul_port_result

    - name: Consul exists flag fact set
      connection: local
      set_fact:
        consul_exists: "{{ 'consul' in check_consul_port_result.stdout }}"

    #--------------------------------------------------------------------------
    # abort if consul already exists
    #--------------------------------------------------------------------------
    # when any running instance exists, abort play in two cases:
    # 1. dcs_safeguard = true          (global flag to prevent accidentally purge)
    # 2. dcs_clean = true
    - name: Abort due to existing consul instance
      connection: local
      any_errors_fatal: true
      when: consul_exists and (dcs_safeguard or not dcs_clean)
      fail: msg="Abort because consul instance {{ inventory_hostname }} is running, use dcs_clean=true"


#------------------------------------------------------------------------------
# Clean consul
#------------------------------------------------------------------------------
- name: Clean existing consul
  tags: dcs_clean
  block:
    #--------------------------------------------------------------------------
    # purge dcs
    #--------------------------------------------------------------------------
    # dangerous: (it will remove consul data!)
    - name: Clean existing consul instance
      # connection: local, leave a chance for human intervention
      when: not dcs_safeguard and consul_exists and dcs_clean # DANGEROUS!
      debug:
        msg: "[DANGEROUS] RUNNING CONSUL INSTANCE {{ inventory_hostname }} WILL BE PURGED!"

    - name: Stop any running consul instance
      ignore_errors: yes
      shell: |
        # try graceful shutdown first
        if ps -u consul -o command | grep -q 'consul agent' ; then
            /usr/bin/consul leave
            systemctl stop consul
        fi
        
        # kill if still exists
        if ps -u consul -o command | grep -q 'consul agent' ; then
            sleep 2
            ps -u consul -o pid:1,command | grep 'consul agent' | awk '{print $1}' | xargs kill
        fi
        
        # kill -9 if not killed 
        if ps -u consul -o command | grep -q 'consul agent' ; then
            sleep 5
            ps -u consul -o pid:1,command | grep 'consul agent' | awk '{print $1}' | xargs kill -9
        fi
        
        # guaranteed success
        rm -rf /etc/consul.d
        rm -rf "{{ consul_data_dir }}"
        exit 0


#------------------------------------------------------------------------------
# Install consul
#------------------------------------------------------------------------------
- name: Make sure consul is installed
  tags: consul_install
  package: name=consul state=present


#------------------------------------------------------------------------------
# Config consul
#------------------------------------------------------------------------------
- name: Config consul
  tags: consul_config
  block:

    - name: Create consul dir
      file: path={{ item }} state=directory owner=consul group=consul mode=0775
      with_items:
        - /etc/consul.d
        - "{{ consul_data_dir }}"

    #------------------------------------------------------------------------------
    # acquire nodename
    #------------------------------------------------------------------------------
    # use hostname as nodename if not provided
    - name: Fetch hostname from server if no node name is given
      when: nodename is not defined or nodename == ''
      shell: echo $HOSTNAME
      register: hostname_result

    - name: Setup nodename according to hostname
      when: nodename is not defined or nodename == ''
      connection: local
      set_fact:
        nodename: "{{ hostname_result.stdout }}"

    #------------------------------------------------------------------------------
    # render main config
    #------------------------------------------------------------------------------
    # remove hcl format config
    - name: Make sure consul hcl absent
      file: path=/etc/consul.d/consul.hcl state=absent

    # "disable_hostname": true is optional
    - name: Render consul main conf /etc/consul.d/consul.json
      copy:
        dest: /etc/consul.d/consul.json
        mode: 0644
        owner: consul
        group: consul
        content: |
          {
            "datacenter": "{{ dcs_name }}",
            "node_name": "{{ nodename }}",
            "bind_addr": "{{ inventory_hostname }}",
            "retry_join": {{ dcs_servers.values()|list|to_json }},
            "data_dir": "{{ consul_data_dir }}",
            "log_level": "INFO",
            "enable_local_script_checks": true,
            "telemetry": {
              "prometheus_retention_time": "15m",
              "disable_hostname": true
            }
          }

    - name: Render consul node meta /etc/consul.d/consul-meta.json
      copy:
        dest: /etc/consul.d/consul-meta.json
        owner: consul
        mode: 0644
        content: |
          {
            "node_meta": {
              "cluster": "{{ node_cluster|default('nodes') }}",
              "instance": "{{ nodename }}"
            }
          }

    #------------------------------------------------------------------------------
    # render server config on DCS SERVER
    #------------------------------------------------------------------------------
    # determine quorum for server
    - name: Get consul bootstrap expect quroum
      when: inventory_hostname in dcs_servers.values()
      connection: local
      set_fact: consul_bootstrap_expect={{ ((dcs_servers.values() | length / 2)|round(0, 'floor') + 1)|int }}

    - name: Render consul server /etc/consul.d/consul-server.json
      when: inventory_hostname in dcs_servers.values()
      copy:
        dest: /etc/consul.d/consul-server.json
        mode: 0644
        owner: consul
        group: consul
        content: |
          {
            "server": true,
            "bootstrap_expect": {{ consul_bootstrap_expect | default(1) }}
          }

    #------------------------------------------------------------------------------
    # render ui config on META NODES
    #------------------------------------------------------------------------------
    - name: Render consul ui conf /etc/consul.d/consul-server.json
      when: meta_node|bool
      copy:
        dest: /etc/consul.d/consul-ui.json
        mode: 0644
        owner: consul
        group: consul
        content: |
          {
            "ui_config": {
              "enabled": true
            }
          }

    #------------------------------------------------------------------------------
    # copy systemd service
    #------------------------------------------------------------------------------
    - name: Copy consul systemd service
      copy: src=consul.service dest=/usr/lib/systemd/system/consul.service


#------------------------------------------------------------------------------
# Launch consul server first
#------------------------------------------------------------------------------
- name: Setup consul server
  tags: [ consul_launch, consul_server ]
  when: inventory_hostname in dcs_servers.values()
  throttle: 1                                 # setup server one by one
  block:

    # launch consul
    - name: Launch consul server service
      systemd: name=consul state=restarted enabled=yes daemon_reload=yes

    # wait consul online
    - name: Wait for consul server online
      wait_for: host=127.0.0.1 port=8500 state=started timeout=30


#------------------------------------------------------------------------------
# Launch consul agent
#------------------------------------------------------------------------------
- name: Setup consul agent
  tags: [ consul_launch , consul_agent ]
  when: inventory_hostname not in dcs_servers.values()
  block:

    # launch consul
    - name: Launch consul agent service
      systemd: name=consul state=restarted enabled=yes daemon_reload=yes

    # wait consul online
    - name: Wait for consul agent online
      wait_for: host=127.0.0.1 port=8500 state=started timeout=30

...
