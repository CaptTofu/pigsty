---
#------------------------------------------------------------------------------
# Install redis
#------------------------------------------------------------------------------
# redis_install = none   : redis is already installed somewhere
# redis_install = yum    : redis is installed via yum
# redis_install = binary : redis is installed via copy binary (files/bin)

- name: Install redis
  tags: [ redis_install ]
  when: redis_install != '' and ( redis_install == 'yum' or redis_install == 'binary' )
  block:

    # when redis_install = 'yum' (default)
    - name: Install redis via yum
      when: redis_install == 'yum'
      package: name=redis state=present

    # when redis_install = 'binary'
    # - name: Install redis via binaries
    #   when: redis_install == 'binary'
    #   copy: src={{ item.src }} dest={{ item.dest }} owner=root mode=0755
    #   with_items:
    #     - { src: bin/redis-server     , dest: /bin/redis-server     }
    #     - { src: bin/redis-server     , dest: /bin/redis-server     }
    #     - { src: bin/redis-cli        , dest: /bin/redis-cli        }
    #     - { src: bin/redis-sentinel   , dest: /bin/redis-sentinel   }
    #     - { src: bin/redis-check-rdb  , dest: /bin/redis-check-rdb  }
    #     - { src: bin/redis-check-aof  , dest: /bin/redis-check-aof  }
    #     - { src: bin/redis-benchmark  , dest: /bin/redis-benchmark  }
    #     - { src: redis-shutdown , dest: /usr/libexec/redis-shutdown }

- name: Create user redis
  tags: [ redis_install , redis_user ]
  user: name=redis home=/home/redis generate_ssh_key=yes

- name: Create redis resource dir
  tags: [ redis_install , redis_dir ]
  become: yes
  block:
    - name: Make sure fs main dir exists
      file: path={{ redis_fs_main }} state=directory owner=root mode=0777

    - name: Make sure redis data dir exists
      file: path={{ item }} state=directory owner=redis mode=0700
      with_items:
        - /etc/redis
        - /var/log/redis/
        - /var/run/redis/
        - "{{ redis_fs_main }}/redis"


#------------------------------------------------------------------------------
# Assert before launch instances
#------------------------------------------------------------------------------
- name: Check necessary variables exists
  tags: redis_ins
  assert:
    that:
      - redis_cluster is defined and redis_cluster != ''
      - redis_node is defined
      - redis_instances is defined
      - redis_instances | type_debug == "dict"
    fail_msg: variable `redis_cluster|redis_instances` are required for redis deployment

#------------------------------------------------------------------------------
# Create redis instances
#------------------------------------------------------------------------------
- include_tasks: instance.yml
  tags: redis_ins
  vars:
    port: "{{ item.key }}"
    conf: "{{ item.value|default({}) }}"
  with_dict: "{{ redis_instances }}"


#------------------------------------------------------------------------------
# create redis cluster if redis_mode = 'cluster'
#------------------------------------------------------------------------------
- name: Join redis cluster
  when: redis_mode == 'cluster'
  tags: redis_join
  delegate_to: '{{ groups["meta"][0] }}'
  run_once: true
  block:

    - name: Fetch redis cluster memberships
      set_fact:
        redis_cluster_members={{ hostvars| json_query(redis_cluster_members_query) }}
      vars:
        redis_cluster_members_query: "[@.*][0][?redis_cluster=='{{ redis_cluster }}']"

    - name: Render redis cluster join script
      copy:
        dest: /tmp/{{ redis_cluster }}-join.sh
        mode: 0755
        owner: root
        content: |
          #!/bin/bash
          /bin/redis-cli --cluster create --cluster-yes \
          {% for node in redis_cluster_members %}
          {% for port in node.redis_instances %}
            {{ node.inventory_hostname }}:{{ port }} \
          {% endfor %}
          {% endfor %}
            --cluster-replicas {{ redis_cluster_replicas|default(1) }}

    - name: Join redis clusters
      shell: "/tmp/{{ redis_cluster }}-join.sh"





...

