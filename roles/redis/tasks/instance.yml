###############################################################################
# Setup Redis Instance Resource
###############################################################################

#------------------------------------------------------------------------------
# Assert before launch instances
#------------------------------------------------------------------------------
- name: Check redis instance existance
  tags: [ redis_ins , redis_precheck ]
  block:
    - name: Check for redis instance port
      any_errors_fatal: true
      command: 'ss -tp state listening sport = :{{ port }}'
      register: check_redis_port_result

    - name: Set fact whether redis port is open
      tags: [ redis_ins , redis_precheck ]
      set_fact:
        redis_exists: "{{ 'redis' in check_redis_port_result.stdout }}"

    # when any running instance exists, abort play in two cases:
    # 1. redis_disable_purge = true          (global flag to prevent accidentally purge)
    # 2. redis_exists_action == 'abort'
    - name: Abort due to existing postgres instance
      when: redis_exists and redis_disable_purge or redis_exists and redis_exists_action == 'abort'
      any_errors_fatal: true
      fail: msg="Abort because redis instance {{ redis_cluster }}-{{ redis_node }}-{{ port }} is running"

    - debug:
        msg: "{{ redis_cluster }}-{{ redis_node }}-{{ port }} @ {{ inventory_hostname }}:{{ port }} {% if redis_exists %}is running{% else %}is not running{% endif %} {% if redis_exists and redis_exists_action == 'clean' %} WILL BE PURGED!{% endif %}"


#------------------------------------------------------------------------------
# Clean [DANGEROUS!]
#------------------------------------------------------------------------------
# if redis_exists_action == 'clean' and purge is not disabled, clean before running
- name: Clean existing redis instance
  tags: [ redis_ins, redis_clean ]
  when: redis_exists_action == 'clean' and not redis_disable_purge
  block:

    - name: Shut redis instance systemd service
      ignore_errors: true
      systemd:
        name: "{{ redis_cluster }}-{{ redis_node }}-{{ port }}.service"
        state: stopped
        #enabled: no

    - name: Remove redis instance data dir
      file: path={{ redis_fs_main }}/redis/{{ port }} state=absent owner=redis mode=0700


#------------------------------------------------------------------------------
# Config
#------------------------------------------------------------------------------
- name: Create redis resource dir
  tags: [ redis_ins, redis_config ]
  become: yes
  block:

    # data dir @ /data/redis/<port> (default)
    - name: Create redis instance data dir
      file: path={{ redis_fs_main }}/redis/{{ port }} state=directory owner=redis mode=0700

    # config @ /etc/redis/<port>.conf
    - name: Render redis instance config
      template: src={{ config_template }} dest=/etc/redis/{{ port }}.conf owner=redis mode=0700
      vars:
        upstream: "{{ conf['replica_of']|default(None) }}"
        config_template: "{% if redis_mode == 'sentinel' %}redis-sentinel.conf{% else %}{{ redis_conf }}{% endif %}"

    # services name examples:  redis-test-1-6379 , redis-sentinel-2-26379
    - name: Render redis systemd service file
      template: src={{ service_template }} dest=/usr/lib/systemd/system/{{ svcname }} owner=root mode=644
      vars:
        svcname: "{{ redis_cluster }}-{{ redis_node }}-{{ port }}.service"
        service_template: "{% if redis_mode == 'sentinel' %}redis-sentinel.service{% else %}redis.service{% endif %}"


#------------------------------------------------------------------------------
# launch
#------------------------------------------------------------------------------
# if existing data dir not cleaned, it will RESTART with existing rdb file
- name: Restart redis-server primary systemd service
  tags: [ redis_ins, redis_primary ]
  when: conf.replica_of is not defined
  systemd:
    name: "{{ redis_cluster }}-{{ redis_node }}-{{ port }}.service"
    daemon_reload: on
    state: restarted
    #enabled: on

- name: Restart redis-server replica systemd service
  tags: [ redis_ins, redis_replica ]
  when: conf.replica_of is defined
  service:
    name: "{{ redis_cluster }}-{{ redis_node }}-{{ port }}.service"
    daemon_reload: on
    state: restarted
    #enabled: on