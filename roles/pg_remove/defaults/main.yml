---
#-----------------------------------------------------------------
# PG_REMOVE
#-----------------------------------------------------------------
rm_pgdata: true                   # remove postgres data? true by default
rm_pgbkup: true                   # remove postgres backup? true by default
rm_pgpkgs: false                  # uninstall pg_packages? false by default

#-----------------------------------------------------------------
# DCS (Reference)
#-----------------------------------------------------------------
dcs_ssl_enabled: true             # secure dcs communications with ssl?
dcs_registry: consul              # where to register services: none | consul | etcd | both

#-----------------------------------------------------------------
# GRAFANA (Reference)
#-----------------------------------------------------------------
grafana_endpoint: http://${meta_ip}:3000     # grafana endpoint url
grafana_admin_username: admin     # default grafana admin username
grafana_admin_password: pigsty    # default grafana admin password

#-----------------------------------------------------------------
# PostgreSQL (Reference)
#-----------------------------------------------------------------
pg_dbsu: postgres                 # os user for database, postgres by default (unwise to change it)
pg_dbsu_home: /var/lib/pgsql      # postgresql home directory
pg_safeguard: false               # true will disable pg_clean at all, even for pgsql-remove.yml
pg_dcs_type: etcd                 # which dcs to use: consul or etcd or raft
pg_namespace: /pg                 # top level key namespace in dcs
pg_data: /pg/data                 # postgres data directory (soft link)
pg_fs_main: /data                 # primary data disk mount point   /pg   -> {{ pg_fs_main }}/postgres/{{ pg_instance }}
pg_fs_bkup: /data/backups         # backup disk mount point         /pg/* -> {{ pg_fs_bkup }}/postgres/{{ pg_instance }}/*
pg_bin_dir: /usr/pgsql/bin        # postgres binary dir, /usr/pgsql/bin by default, ln -S /usr/pgsql-{ver} /usr/pgsql
pg_log_dir: /pg/log/postgres      # postgres log dir, /pg/log/postgres by default
pg_version: 14                    # default postgresql version to be installed

pg_packages:                      # postgresql related packages. `${pg_version} will be replaced by `pg_version`
  - postgresql${pg_version}* citus111_${pg_version} timescaledb-2-postgresql-${pg_version} postgis33_${pg_version}* # 33 on el8+
  - pgbouncer pg_exporter pgbadger consul haproxy vip-manager patroni patroni-consul patroni-etcd pgbackrest #pg_activity
pg_extensions:                    # postgresql extensions, `${pg_version} will be replaced by actual `pg_version`
  - pg_repack_${pg_version} pg_qualstats_${pg_version} pg_stat_kcache_${pg_version} pg_stat_monitor_${pg_version} wal2json_${pg_version}

pg_services:                      # how to expose postgres service in cluster?
  - name: primary                 # service name {{ pg_cluster }}-primary
    src_ip: "*"
    src_port: 5433
    dst_port: pgbouncer           # 5433 route to pgbouncer
    check_url: /primary           # primary health check, success when instance is primary
    selector: "[]"                # select all instance as primary service candidate

  - name: replica                 # service name {{ pg_cluster }}-replica
    src_ip: "*"
    src_port: 5434
    dst_port: pgbouncer
    check_url: /read-only         # read-only health check. (including primary)
    selector: "[]"                # select all instance as replica service candidate
    selector_backup: "[? pg_role == `primary` || pg_role == `offline` ]"

  - name: default                 # service's actual name is {{ pg_cluster }}-default
    src_ip: "*"                   # service bind ip address, * for all, vip for cluster virtual ip address
    src_port: 5436                # bind port, mandatory
    dst_port: postgres            # target port: postgres|pgbouncer|port_number , pgbouncer(6432) by default
    check_method: http            # health check method: only http is available for now
    check_port: patroni           # health check port:  patroni|pg_exporter|port_number , patroni by default
    check_url: /primary           # health check url path, / as default
    check_code: 200               # health check http code, 200 as default
    selector: "[]"                # instance selector
    haproxy:                      # haproxy specific fields
      maxconn: 3000               # default front-end connection
      balance: roundrobin         # load balance algorithm (roundrobin by default)
      default_server_options: 'inter 3s fastinter 1s downinter 5s rise 3 fall 3 on-marked-down shutdown-sessions slowstart 30s maxconn 3000 maxqueue 128 weight 100'

  - name: offline                 # service name {{ pg_cluster }}-offline
    src_ip: "*"
    src_port: 5438
    dst_port: postgres
    check_url: /replica           # offline MUST be a replica
    selector: "[? pg_role == `offline` || pg_offline_query ]"         # instances with pg_role == 'offline' or instance marked with 'pg_offline_query == true'
    selector_backup: "[? pg_role == `replica` && !pg_offline_query]"  # replica are used as backup server in offline service

pg_users: []                      # business users
pg_databases: []                  # business databases
pg_services_extra: []             # extra services

...