---
#------------------------------------------------------------------------------
# Detect Leadership
#------------------------------------------------------------------------------
# since cluster may switchover/failover, it's important to detect actual role first
- name: Detect real leadership
  block:
    - name: Get actuall pg_role
      shell: /pg/bin/pg-role
      register: pg_role_result

    - name: Get pg_role from result
      set_fact:
        pg_role_detected: pg_role_result.stdout

    # TODO: Raise a notice if pg_role != pg_role_detected
    - name: Set pg_role if applicable
      when: pg_role_detected == 'primary' or pg_role_detected == 'replica'
      set_fact:
        pg_role: "{{ pg_role_detected }}"


#------------------------------------------------------------------------------
# Remove Follower
#------------------------------------------------------------------------------
# remove followers first to avoid unnecessary failover, especially when removing entire cluster
- name: Remove follower postgres
  become: yes
  ignore_errors: yes
  when: pg_role != 'primary'
  block:

    #---------------------------------------------
    # Deregister Service
    #---------------------------------------------
    - name: Remove follower postgres service from consul
      tags: consul_registry
      when: dcs_registry == 'consul'
      file:
        path: /etc/consul.d/svc-postgres.json
        state: absent

    - name: Remove follower patroni service from consul
      tags: consul_registry
      when: dcs_registry == 'consul'
      file:
        path: /etc/consul.d/svc-patroni.json
        state: absent

    - name: Reload follower consul to dereigster postgres & patroni
      when: dcs_registry == 'consul'
      systemd: name=consul state=reloaded

    #---------------------------------------------
    # Stop Service
    #---------------------------------------------
    - name: Stop and disable follower patroni service
      systemd: name=patroni state=stopped enabled=no daemon_reload=yes

    - name: Stop and disable follower postgres service
      systemd: name=postgres state=stopped enabled=no daemon_reload=yes

    # in case of maintenance mode
    - name: Force follower postgres shutdown
      become_user: "{{ pg_dbsu }}"
      shell: "{{ pg_bin_dir }}/pg_ctl -D {{ pg_data }} stop -m immediate; /bin/true"


#------------------------------------------------------------------------------
# Remove Leader
#------------------------------------------------------------------------------
- name: Remove leader postgres
  become: yes
  ignore_errors: yes
  when: pg_role == 'primary'
  block:

    #---------------------------------------------
    # Deregister Service
    #---------------------------------------------
    - name: Remove leader postgres service from consul
      tags: consul_registry
      when: dcs_registry == 'consul'
      file:
        path: /etc/consul.d/svc-postgres.json
        state: absent

    - name: Remove leader patroni service from consul
      tags: consul_registry
      when: dcs_registry == 'consul'
      file:
        path: /etc/consul.d/svc-patroni.json
        state: absent

    - name: Reload leader consul to dereigster postgres & patroni
      when: dcs_registry == 'consul'
      systemd: name=consul state=reloaded

    #---------------------------------------------
    # Stop Service
    #---------------------------------------------
    - name: Stop and disable leader patroni service
      systemd: name=patroni state=stopped enabled=no daemon_reload=yes

    - name: Stop and disable leader postgres service
      systemd: name=postgres state=stopped enabled=no daemon_reload=yes

    # in case of maintenance mode
    - name: Force leader postgres shutdown
      become_user: "{{ pg_dbsu }}"
      shell: "{{ pg_bin_dir }}/pg_ctl -D {{ pg_data }} stop -m immediate; /bin/true"

    # when cleanup primary, remove dcs metadata
    - name: Remove dcs postgres metadata
      ignore_errors: true
      when: pg_role == 'primary'
      block:

        - name: Remove postgres metadata in consul
          when: pg_dcs_type == 'consul'
          shell: |
            {% if dcs_ssl_enabled is defined and dcs_ssl_enabled|bool %}
            export CONSUL_HTTP_SSL=true
            export CONSUL_HTTP_ADDR=https://127.0.0.1:8501
            export CONSUL_CACERT={{ cert_homedir }}/{{ ca_file }}.crt
            {% else %}
            export CONSUL_HTTP_ADDR=http://127.0.0.1:8500
            {% endif %}
            consul kv delete -recurse {{ pg_namespace }}/{{ pg_cluster }}; /bin/true

        - name: Remove postgres metadata in etcd
          when: pg_dcs_type == 'etcd'
          shell: |
            {% if dcs_ssl_enabled is defined and dcs_ssl_enabled|bool %}
            export ETCDCTL_ENDPOINTS="{% for k,v in dcs_servers.items() %}{% if not loop.first %},{% endif %}https://{{ v }}:2379{% endfor %}"
            export ETCDCTL_CA_FILE="{{ cert_homedir }}/{{ ca_file }}.crt"
            {% else %}
            export ETCDCTL_ENDPOINTS="{% for k,v in dcs_servers.items() %}{% if not loop.first %},{% endif %}http://{{ v }}:2379{% endfor %}"
            {% endif %}
            etcdctl rm -r {{ pg_namespace }}/{{ pg_cluster }}; /bin/true

...
