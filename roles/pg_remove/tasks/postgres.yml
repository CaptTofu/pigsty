---
#------------------------------------------------------------------------------
# Detect Leadership
#------------------------------------------------------------------------------
# since cluster may switchover/failover, it's important to detect actual role first
#- name: detect real pg_role
#  block:
#
#    # detect pg_role
#    - name: get actual pg_role
#      shell: /pg/bin/pg-role
#      register: pg_role_result
#    - name: get pg_role from result
#      connection: local
#      set_fact:
#        pg_role_detected: pg_role_result.stdout
#
#    - name: set actual pg_role if applicable
#      when: pg_role_detected == 'primary' or pg_role_detected == 'replica'
#      set_fact:
#        pg_role: "{{ pg_role_detected }}"
#
#    # TODO: Raise a notice if pg_role != pg_role_detected
#    - debug:
#        msg: "REMOVE {{ pg_cluster }}-{{ pg_seq }}, pg_role: {{ pg_role }}, detect role: {{ pg_role_detected }}"

#------------------------------------------------------------------------------
# Remove Follower
#------------------------------------------------------------------------------
# remove followers first to avoid unnecessary failover, especially when removing entire cluster
- name: remove postgres replica
  tags: pg_replica
  become: yes
  ignore_errors: yes
  when: pg_role != 'primary'
  block:

    - name: stop and disable patroni replica service
      systemd: name=patroni state=stopped enabled=no daemon_reload=yes

    - name: stop and disable postgres replica service
      systemd: name=postgres state=stopped enabled=no daemon_reload=yes

    # in case of maintenance mode
    - name: shutdown postgres replica with force
      become_user: "{{ pg_dbsu }}"
      shell: "{{ pg_bin_dir }}/pg_ctl -D {{ pg_data }} stop -m immediate; /bin/true"



#------------------------------------------------------------------------------
# Remove Leader
#------------------------------------------------------------------------------
- name: remove postgres primary
  tags: pg_primary
  become: yes
  ignore_errors: yes
  when: pg_role == 'primary'
  block:

    - name: stop and disable postgres primary service
      systemd: name=patroni state=stopped enabled=no daemon_reload=yes

    - name: stop and disable postgres primary service
      systemd: name=postgres state=stopped enabled=no daemon_reload=yes

    # in case of maintenance mode
    - name: shutdown postgres primary with force
      become_user: "{{ pg_dbsu }}"
      shell: "{{ pg_bin_dir }}/pg_ctl -D {{ pg_data }} stop -m immediate; /bin/true"


#------------------------------------------------------------------------------
# Remove DCS Meta Data
#------------------------------------------------------------------------------
# when cleanup primary, remove etcd metadata, too
- name: remove postgres metadata from etcd
  tags: etcd
  ignore_errors: true
  when: pg_role == 'primary' and pg_cluster != ''
  delegate_to: '{{ meta_ip }}'
  shell: |
    export ETCDCTL_API={{ etcd_api }}
    export ETCDCTL_ENDPOINTS={% for ip in groups['etcd'] %}{% if not loop.first %},{% endif %}https://{{ ip }}:{{ etcd_port }}{% endfor %}
    
    META_DIR="{{ pg_namespace|default('/pg') }}/{{ pg_cluster }}"
    if (( ${ETCDCTL_API} == 3 )); then
      export ETCDCTL_CACERT=/etc/pki/ca.crt
      export ETCDCTL_CERT=/etc/pki/meta.crt
      export ETCDCTL_KEY=/etc/pki/meta.key
      etcdctl del "${META_DIR}" --prefix=true
    else          
      export ETCDCTL_CA_FILE=/etc/pki/ca.crt
      export ETCDCTL_CERT_FILE=/etc/pki/meta.crt
      export ETCDCTL_KEY_FILE=/etc/pki/meta.key
      etcdctl rm -r "${META_DIR}" 
    fi
    /bin/true

...