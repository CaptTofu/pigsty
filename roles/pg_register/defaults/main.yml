---
#-----------------------------------------------------------------
# GRAFANA (Reference)
#-----------------------------------------------------------------
grafana_enabled: true             # setup grafana on meta nodes?
grafana_endpoint: http://${admin_ip}:3000 # grafana endpoint url
grafana_admin_username: admin     # default grafana admin username
grafana_admin_password: pigsty    # default grafana admin password
#-----------------------------------------------------------------
# PROMETHEUS (Reference)
#-----------------------------------------------------------------
prometheus_enabled: true          # setup prometheus on meta nodes?
#-----------------------------------------------------------------
# PG_BUSINESS (Reference)
#-----------------------------------------------------------------
pg_monitor_username: dbuser_monitor
pg_monitor_password: DBUser.Monitor
#-----------------------------------------------------------------
# PG_BOOTSTRAP (Reference)
#-----------------------------------------------------------------
pg_port: 5432                     # postgres port, 5432 by default
patroni_port: 8008                # default patroni port
pgbouncer_port: 6432              # pgbouncer port, 6432 by default
#-----------------------------------------------------------------
# PG_EXPORTER (Reference)
#-----------------------------------------------------------------
pg_exporter_port: 9630            # pg_exporter listen port, 9630 by default
pgbouncer_exporter_port: 9631     # pgbouncer_exporter listen port, 9631 by default
#-----------------------------------------------------------------
# PG_SERVICE (Reference)
#-----------------------------------------------------------------
pg_services_default:              # how to expose postgres service in cluster?
  - name: primary                 # service name {{ pg_cluster }}-primary
    src_ip: "*"
    src_port: 5433
    dst_port: pgbouncer           # 5433 route to pgbouncer
    check_url: /primary           # primary health check, success when instance is primary
    selector: "[]"                # select all instance as primary service candidate

  - name: replica                 # service name {{ pg_cluster }}-replica
    src_ip: "*"
    src_port: 5434
    dst_port: pgbouncer
    check_url: /read-only         # read-only health check. (including primary)
    selector: "[]"                # select all instance as replica service candidate
    selector_backup: "[? pg_role == `primary` || pg_role == `offline` ]"

  - name: default                 # service's actual name is {{ pg_cluster }}-default
    src_ip: "*"                   # service bind ip address, * for all, vip for cluster virtual ip address
    src_port: 5436                # bind port, mandatory
    dst_port: postgres            # target port: postgres|pgbouncer|port_number , pgbouncer(6432) by default
    check_method: http            # health check method: only http is available for now
    check_port: patroni           # health check port:  patroni|pg_exporter|port_number , patroni by default
    check_url: /primary           # health check url path, / as default
    check_code: 200               # health check http code, 200 as default
    selector: "[]"                # instance selector
    haproxy:                      # haproxy specific fields
      maxconn: 3000               # default front-end connection
      balance: roundrobin         # load balance algorithm (roundrobin by default)
      default_server_options: 'inter 3s fastinter 1s downinter 5s rise 3 fall 3 on-marked-down shutdown-sessions slowstart 30s maxconn 3000 maxqueue 128 weight 100'

  - name: offline                 # service name {{ pg_cluster }}-offline
    src_ip: "*"
    src_port: 5438
    dst_port: postgres
    check_url: /replica           # offline MUST be a replica
    selector: "[? pg_role == `offline` || pg_offline_query ]"         # instances with pg_role == 'offline' or instance marked with 'pg_offline_query == true'
    selector_backup: "[? pg_role == `replica` && !pg_offline_query]"  # replica are used as backup server in offline service

pg_services: []                   # extra services
haproxy_exporter_port: 9101       # haproxy admin/exporter port, 9101 by default
...