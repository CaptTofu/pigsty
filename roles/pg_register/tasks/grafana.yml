---
#--------------------------------------------------------------#
# Launch grafana
#--------------------------------------------------------------#
- name: Launch grafana service
  when: meta_node|bool
  systemd: name=grafana-server state=restarted enabled=yes daemon_reload=yes

- name: Wait for grafana online
  when: meta_node|bool
  wait_for: host=127.0.0.1 port=3000 state=started


#--------------------------------------------------------------#
# Provisioning
#--------------------------------------------------------------#
- name: Provisioning grafana with grafana.py
  when: meta_node|bool
  tags: [ dashboard, dashboard_init ]
  ignore_errors: true
  shell: |
    #!/bin/bash

    # grafana access info
    export GRAFANA_ENDPOINT={{ grafana_endpoint }}
    export GRAFANA_USERNAME={{ grafana_admin_username }}
    export GRAFANA_PASSWORD={{ grafana_admin_password }}

    # external access info
    export NGINX_UPSTREAM_HOME={{ nginx_upstream | json_query('[?name==`home`].domain') | first }}
    export NGINX_UPSTREAM_CONSUL={{ nginx_upstream | json_query('[?name==`consul`].domain') | first }}
    export NGINX_UPSTREAM_PROMETHEUS={{ nginx_upstream | json_query('[?name==`prometheus`].domain') | first }}
    export NGINX_UPSTREAM_ALERTMANAGER={{ nginx_upstream | json_query('[?name==`alertmanager`].domain') | first }}
    export NGINX_UPSTREAM_GRAFANA={{ nginx_upstream | json_query('[?name==`grafana`].domain') | first }}

    # run provisinoing logic
    /etc/pigsty/dashboards/grafana.py init /etc/pigsty/dashboards/


#--------------------------------------------------------------#
# Register Postgres Datasource to Grafana
#--------------------------------------------------------------#
- name: Register pgsql datasources to grafana
  block:

    #--------------------------------------------------------------#
    # render datasource definition to:
    # /etc/pigsty/datasources/{{ pg_instance }}.{{ datname }}.json
    #--------------------------------------------------------------#
    - name: Render datasource definition on meta node
      delegate_to: meta
      copy:
        dest: "/etc/pigsty/datasources/{{ insdb }}.json"
        content: |
          {
            "type": "postgres",
            "access": "proxy",
            "name": "{{ insdb }}",
            "url": "{{ inventory_hostname }}:{{ pg_port }}",
            "user": "{{ pg_monitor_username }}",
            "database": "{{ datname }}",
            "typeLogoUrl": "",
            "basicAuth": false,
            "basicAuthUser": "",
            "basicAuthPassword": "",
            "withCredentials": false,
            "isDefault": false,
            "jsonData": {
              "connMaxLifetime": 3600,
              "maxIdleConns": 1,
              "maxOpenConns": 8,
              "postgresVersion": {{ pg_version }}00,
              "sslmode": "{{ pg_sslmode }}",
              "tlsAuth": false,
              "tlsAuthWithCACert": false
            },
            "secureJsonData":{
              "password": "{{ pg_monitor_password }}"
            }
          }
        mode: 0600
      vars:
        datname: "{{ item.name }}"
        insdb: "{{ pg_cluster }}-{{ pg_seq }}.{{ datname }}"
      with_items: "{{ pg_databases }}"


    #--------------------------------------------------------------#
    # upsert datasource using grafana datasource API
    #--------------------------------------------------------------#
    - name: Load grafana datasource on meta node
      delegate_to: meta
      shell: |
        curl -X DELETE "{{ grafana_endpoint }}/api/datasources/name/{{ insdb }}" -u "{{ grafana_admin_username }}:{{ grafana_admin_password }}"  -H 'Content-Type: application/json' || true
        curl -X POST   "{{ grafana_endpoint }}/api/datasources/" -u "{{ grafana_admin_username }}:{{ grafana_admin_password }}"  -H 'Content-Type: application/json' -d @/etc/pigsty/datasources/{{ insdb }}.json || true
      vars:
        datname: "{{ item.name }}"
        insdb: "{{ pg_cluster }}-{{ pg_seq }}.{{ datname }}"
      with_items: "{{ pg_databases }}"

...
