---
#------------------------------------------------------------------------------
# pgsql targets
#------------------------------------------------------------------------------
# render pgsql targets in cluster mode by default (each cluster contains a file)
- name: Render pgsql file-sd targets for prometheus
  tags: prometheus_pgsql_targets
  copy:
    dest: /etc/prometheus/targets/pgsql/{{ item }}.yml
    content: |
      {% set target_list = hostvars|json_query(cluster_query)|sort(attribute='pg_seq') %}
      {% for target in target_list %}
      #======> {{ target.pg_cluster }}-{{ target.pg_seq }} [{{ target.pg_role }}] @ {{ target.inventory_hostname }}
      - labels: { cls: {{ target.pg_cluster }}, ins: {{ target.pg_cluster }}-{{ target.pg_seq }} }
        targets: [{{ target.inventory_hostname }}:{{ target.pg_exporter_port }}{% if target.node_exporter_enabled %}, {{ target.inventory_hostname }}:{{ target.node_exporter_port }}{% endif %}{% if target.pgbouncer_exporter_enabled %}, {{ target.inventory_hostname }}:{{ target.pgbouncer_exporter_port }}{% endif %}{% if target.haproxy_enabled %}, {{ target.inventory_hostname }}:{{ target.haproxy_exporter_port }}{% endif %}]

      {% endfor %}
  vars:
    cluster_query: "[@.*][0][?pg_cluster=='{{ item }}']"
  with_items: "{{ hostvars|json_query('*.pg_cluster')|sort|unique }}"    # distinct cluster names


#--------------------------------------------------------------------------
# Alternative render option (obsolete)
#--------------------------------------------------------------------------
# You can manage prometheus static monitor targets in three mode:
#   cluster: default mode, each cluster have one configuration file: /etc/prometheus/targets/pg-meta.yml
#   single:  each postgres instance have one configuration file:     /etc/prometheus/targets/pg-meta-1.yml
#   batch:   all postgres instance are listed in one configuration file: /etc/prometheus/targets/all.yml

#--------------------------------------------------------------------------
# render in cluster mode
#--------------------------------------------------------------------------
#- name: Render prometheus targets in cluster mode
#  when: prometheus_sd_target == 'cluster'
#  copy:
#    dest: /etc/prometheus/targets/pgsql/{{ item }}.yml
#    content: |
#      {% set target_list = hostvars|json_query(cluster_query)|sort(attribute='pg_seq') %}
#      {% for target in target_list %}
#      #======> {{ target.pg_cluster }}-{{ target.pg_seq }} [{{ target.pg_role }}] @ {{ target.inventory_hostname }}
#      - labels: { cls: {{ target.pg_cluster }}, ins: {{ target.pg_cluster }}-{{ target.pg_seq }} }
#        targets: [{{ target.inventory_hostname }}:{{ target.pg_exporter_port }}{% if target.node_exporter_enabled %}, {{ target.inventory_hostname }}:{{ target.node_exporter_port }}{% endif %}{% if target.pgbouncer_exporter_enabled %}, {{ target.inventory_hostname }}:{{ target.pgbouncer_exporter_port }}{% endif %}{% if target.haproxy_enabled %}, {{ target.inventory_hostname }}:{{ target.haproxy_exporter_port }}{% endif %}]
#
#      {% endfor %}
#  vars:
#    cluster_query: "[@.*][0][?pg_cluster=='{{ item }}']"
#  with_items: "{{ hostvars|json_query('*.pg_cluster')|sort|unique }}"    # distinct cluster names


#--------------------------------------------------------------------------
# render in batch mode
#--------------------------------------------------------------------------
#- name: Render prometheus targets in batch mode
#  when: prometheus_sd_target == 'batch'
#  copy:
#    dest: /etc/prometheus/targets/pgsql/all.yml
#    content: |
#      {% for ip, target in hostvars.items() %}
#      #======> {{ target.pg_cluster }}-{{ target.pg_seq }} [{{ target.pg_role }}] @ {{ target.inventory_hostname }}
#      - labels: { cls: {{ target.pg_cluster }}, ins: {{ target.pg_cluster }}-{{ target.pg_seq }} }
#        targets: [{{ target.inventory_hostname }}:{{ target.pg_exporter_port }}{% if target.node_exporter_enabled %}, {{ target.inventory_hostname }}:{{ target.node_exporter_port }}{% endif %}{% if target.pgbouncer_exporter_enabled %}, {{ target.inventory_hostname }}:{{ target.pgbouncer_exporter_port }}{% endif %}{% if target.haproxy_enabled %}, {{ target.inventory_hostname }}:{{ target.haproxy_exporter_port }}{% endif %}]
#      {% endfor %}

#--------------------------------------------------------------------------
# render in single mode
#--------------------------------------------------------------------------
#- name: Render prometheus targets in single mode
#  when: prometheus_sd_target == 'single'
#  copy:
#    dest: /etc/prometheus/targets/pgsql/{{ hostvars[item].pg_cluster }}-{{ hostvars[item].pg_seq }}.yml
#    content: |
#      {% set target = hostvars[item] %}
#      #======> {{ target.pg_cluster }}-{{ target.pg_seq }} [{{ target.pg_role }}] @ {{ target.inventory_hostname }}
#      - labels: { cls: {{ target.pg_cluster }}, ins: {{ target.pg_cluster }}-{{ target.pg_seq }} }
#        targets: [{{ target.inventory_hostname }}:{{ target.pg_exporter_port }}{% if target.node_exporter_enabled %}, {{ target.inventory_hostname }}:{{ target.node_exporter_port }}{% endif %}{% if target.pgbouncer_exporter_enabled %}, {{ target.inventory_hostname }}:{{ target.pgbouncer_exporter_port }}{% endif %}{% if target.haproxy_enabled %}, {{ target.inventory_hostname }}:{{ target.haproxy_exporter_port }}{% endif %}]
#
#  with_items: "{{ hostvars }}"    # distinct cluster names

...


