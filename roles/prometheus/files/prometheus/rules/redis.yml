---
#==============================================================#
# File      :   redis.yml
# Ctime     :   2020-04-22
# Mtime     :   2020-12-03
# Desc      :   Record and alert rules for redis
# Path      :   /etc/prometheus/rules/redis.yml
# Copyright (C) 2019-2020 Ruohang Feng
#==============================================================#

groups:
  ################################################################
  #                         Redis Rules                          #
  ################################################################
  - name: redis-rules
    rules:

      #==============================================================#
      #                           CPU                                #
      #==============================================================#
      # cpu usage
      - record: redis:ins:cpu_sys
        expr: rate(redis_used_cpu_sys{}[1m])
      - record: redis:ins:cpu_user
        expr: rate(redis_used_cpu_user{}[1m])
      - record: redis:ins:cpu_all
        expr: rate(redis_used_cpu_sys{}[1m]) + rate(redis_used_cpu_user{}[1m])
      # cpu usage (cluster)
      - record: redis:cls:cpu_sys
        expr: avg by (cls) (redis:ins:cpu_sys)
      - record: redis:cls:cpu_user
        expr: avg by (cls) (redis:ins:cpu_user)
      - record: redis:cls:cpu_all
        expr: avg by (cls) (redis:ins:cpu_all)
      # cpu usage (child)
      - record: redis:ins:cpu_sys_child
        expr: rate(redis_used_cpu_sys_children{}[1m])
      - record: redis:ins:cpu_user_child
        expr: rate(redis_used_cpu_user_children{}[1m])
      - record: redis:ins:cpu_all_child
        expr: rate(redis_used_cpu_sys_children{}[1m]) + rate(redis_used_cpu_user_children{}[1m])
      # cpu usage (child, cluster)
      - record: redis:cls:cpu_sys_child
        expr: avg by (cls) (redis:ins:cpu_sys_child)
      - record: redis:cls:cpu_user_child
        expr: avg by (cls) (redis:ins:cpu_user_child)
      - record: redis:cls:cpu_all_child
        expr: avg by (cls) (redis:ins:cpu_all_child)
      # cpu usage (final alias)
      - record: redis:ins:cpu_usage
        expr: redis:ins:cpu_all
      - record: redis:cls:cpu_usage
        expr: redis:cls:cpu_all
      - record: redis:all:cpu_usage
        expr: avg(redis:ins:cpu_usage)

      #==============================================================#
      #                          Memory                              #
      #==============================================================#
      # mem usage
      - record: redis:ins:mem_usage
        expr: redis_memory_used_bytes / redis_memory_max_bytes
      - record: redis:ins:mem_max
        expr: redis_memory_max_bytes
      # mem usage (cluster)
      - record: redis:cls:mem_used
        expr: sum by (cls) (redis_memory_used_bytes)
      - record: redis:cls:mem_max
        expr: sum by (cls) (redis_memory_max_bytes)
      - record: redis:cls:mem_usage
        expr: redis:cls:mem_used / redis:cls:mem_max
      - record: redis:cls:mem_usage_max
        expr: max by (cls) (edis:ins:mem_usage)
      # mem usage (overall)
      - record: redis:all:mem_usage
        expr: sum(redis:cls:mem_used) / sum(redis:cls:mem_max)


      #==============================================================#
      #                           Network                            #
      #==============================================================#
      # receive bandwidth (in)
      - record: redis:ins:rx
        expr: rate(redis_net_input_bytes_total{}[1m])
      - record: redis:cls:rx
        expr: sum by (cls) (redis:ins:rx)
      - record: redis:all:rx
        expr: sum(redis:cls:rx)

      # transmit bandwidth (out)
      - record: redis:ins:tx
        expr: rate(redis_net_output_bytes_total{}[1m])
      - record: redis:cls:tx
        expr: sum by (cls) (redis:ins:tx)
      - record: redis:all:tx
        expr: sum(redis:cls:tx)

      # network traffic (i+o)
      - record: redis:ins:net_traffic
        expr: redis:ins:rx + redis:ins:tx
      - record: redis:cls:net_traffic
        expr: redis:cls:rx + redis:cls:tx
      - record: redis:all:net_traffic
        expr: redis:all:rx + redis:all:tx

      #==============================================================#
      #                         Activity                             #
      #==============================================================#
      # qps realtime
      - record: redis:ins:qps_realtime
        expr: irate(redis_commands_processed_total{}[1m])
      - record: redis:cls:qps_realtime
        expr: sum by (cls) (redis:ins:qps_realtime)
      - record: redis:all:qps_realtime
        expr: sum(redis:cls:qps_realtime)
      # qps rate1m
      - record: redis:ins:qps
        expr: rate(redis_commands_processed_total{}[1m])
      - record: redis:cls:qps
        expr: sum by (cls) (redis:ins:qps)
      - record: redis:all:qps
        expr: sum(redis:cls:qps)
      # qps µ
      - record: redis:ins:qps_mu
        expr: avg_over_time(redis:ins:qps[30m])
      - record: redis:cls:qps_mu
        expr: avg_over_time(redis:cls:qps[30m])
      - record: redis:all:qps_mu
        expr: avg_over_time(redis:all:qps[30m])
      # qps σ
      - record: redis:ins:qps_sigma
        expr: stddev_over_time(redis:ins:qps[30m])
      - record: redis:cls:qps_sigma
        expr: stddev_over_time(redis:cls:qps[30m])
      - record: redis:all:qps_sigma
        expr: stddev_over_time(redis:all:qps[30m])

      #==============================================================#
      #                           Database                           #
      #==============================================================#
      # key expire
      - record: redis:ins:key_expire
        expr: rate(redis_expired_keys_total{}[1m])
      - record: redis:cls:key_expire
        expr: sum by (cls) (redis:ins:key_expire)
      - record: redis:all:key_expire
        expr: sum(redis:cls:key_expire)
      # key evict
      - record: redis:ins:key_evict
        expr: rate(redis_evicted_keys_total{}[1m])
      - record: redis:cls:key_evict
        expr: sum by (cls) (redis:ins:key_evict)
      - record: redis:all:key_evict
        expr: sum(redis:cls:key_evict)
      # key hit
      - record: redis:ins:key_hit
        expr: rate(redis_keyspace_hits_total{}[1m])
      - record: redis:cls:key_hit
        expr: sum by (cls) (redis:ins:key_hit)
      - record: redis:all:key_hit
        expr: sum(redis:cls:key_hit)
      # key miss
      - record: redis:ins:key_miss
        expr: rate(redis_keyspace_misses_total{}[1m])
      - record: redis:cls:key_miss
        expr: sum by (cls) (redis:ins:key_miss)
      - record: redis:all:key_miss
        expr: sum(redis:cls:key_miss)
      # key hit rate
      - record: redis:ins:key_hit_rate
        expr: redis:ins:key_hit / (redis:ins:key_hit + redis:ins:key_miss)
      - record: redis:cls:key_hit_rate
        expr: redis:cls:key_hit / (redis:cls:key_hit + redis:cls:key_miss)
      - record: redis:all:key_hit_rate
        expr: redis:all:key_hit / (redis:all:key_hit + redis:all:key_miss)

      #==============================================================#
      #                         Queries                             #
      #==============================================================#
      # cmd time spent
      - record: redis:ins:cmd_time
        expr: rate(redis_command_call_duration_seconds_sum{}[1m])
      - record: redis:cls:cmd_time
        expr: sum by (cls,cmd) (redis:ins:cmd_time)
      - record: redis:all:cmd_time
        expr: sum by (cmd) (redis:ins:cmd_time)
      # cmd qps
      - record: redis:ins:cmd_qps
        expr: rate(redis_command_call_duration_seconds_count{}[1m])
      - record: redis:cls:cmd_qps
        expr: sum by (cls,cmd) (redis:ins:cmd_qps)
      - record: redis:all:cmd_qps
        expr: sum by (cmd) (redis:cls:cmd_qps)
      # command rt
      - record: redis:ins:cmd_rt
        expr: redis:ins:cmd_time / redis:ins:cmd_qps
      - record: redis:cls:cmd_rt
        expr: redis:cls:cmd_time / redis:cls:cmd_qps
      - record: redis:all:cmd_rt
        expr: redis:all:cmd_time / redis:all:cmd_qps
      # command rt agg
      - record: redis:ins:rt
        expr: sum without (cmd) (redis:ins:cmd_time) / sum without (cmd) (redis:ins:cmd_qps)
      - record: redis:cls:rt
        expr: sum without (cmd) (redis:cls:cmd_time) / sum without (cmd) (redis:cls:cmd_qps)
      - record: redis:all:rt
        expr: sum without (cmd) (redis:all:cmd_time) / sum without (cmd) (redis:all:cmd_qps)
      # rt µ
      - record: redis:ins:rt_mu
        expr: avg_over_time(redis:ins:rt[30m])
      - record: redis:cls:rt_mu
        expr: avg_over_time(redis:cls:rt[30m])
      - record: redis:all:rt_mu
        expr: avg_over_time(redis:all:rt[30m])
      # rt σ
      - record: redis:ins:rt_sigma
        expr: stddev_over_time(redis:ins:rt[30m])
      - record: redis:cls:rt_sigma
        expr: stddev_over_time(redis:cls:rt[30m])
      - record: redis:all:rt_sigma
        expr: stddev_over_time(redis:all:rt[30m])


      #==============================================================#
      #                           Session                            #
      #==============================================================#
      # clients
      - record: redis:ins:clients
        expr: redis_connected_clients
      - record: redis:cls:clients
        expr: sum by (cls) (redis:ins:clients)
      - record: redis:all:clients
        expr: sum(redis:cls:clients)
      # blocked clients
      - record: redis:ins:blocked_clients
        expr: rate(redis_blocked_clients{}[1m])
      - record: redis:cls:blocked_clients
        expr: sum by (cls) (redis:ins:blocked_clients)
      - record: redis:all:blocked_clients
        expr: sum(redis:cls:blocked_clients)
      # conn rate
      - record: redis:ins:conn_rate
        expr: rate(redis_connections_received_total{}[1m])
      - record: redis:cls:conn_rate
        expr: sum by (cls) (redis:ins:conn_rate)
      - record: redis:all:conn_rate
        expr: sum(redis:cls:conn_rate)
      # conn reject rate
      - record: redis:ins:conn_reject
        expr: rate(redis_rejected_connections_total{}[1m])
      - record: redis:cls:conn_reject
        expr: sum by (cls) (redis:ins:conn_reject)
      - record: redis:all:conn_reject
        expr: sum(redis:cls:conn_reject)

      #==============================================================#
      #                         Replication                          #
      #==============================================================#
      - record: redis:ins:lsn_rate
        expr: rate(redis_master_repl_offset{}[1m])


      #==============================================================#
      #                           Persist                            #
      #==============================================================#
      - record: redis:cls:fork_time
        expr: max by (cls) (redis_latest_fork_usec)
      - record: redis:cls:aof_rewrite_time
        expr: max by (cls) (redis_aof_last_rewrite_duration_sec)
      - record: redis:cls:size
        expr: count by (cls) (redis_up)


  ################################################################
  #                         Redis Alert                          #
  ################################################################
  - name: redis-alert
    rules:

      #==============================================================#
      #                         Error                                #
      #==============================================================#
      # redis down triggers a P0 alert
      - alert: REDIS_DOWN
        expr: redis_up{} == 0
        labels:
          severity: P0
        annotations:
          summary: "[P0] PG_DOWN: {{ $labels.cls }} {{ $labels.ins }} {{ $value }}"
          description: |
            redis_up[cls={{ $labels.cls }}, ins={{ $labels.ins }}] = {{ $value }} == 0
            https://dba-g.p1staff.com/d/redis-instance?from=now-5m&to=now&var-ins={{$labels.ins}}

      # redis reject connection in last 5m
      - alert: REDIS_REJECT_CONN
        expr: redis:ins:conn_reject > 0
        labels:
          severity: P0
        annotations:
          summary: "[P0] REDIS_REJECT_CONN: {{ $labels.cls }} {{ $labels.ins }} {{ $value }}"
          description: |
            redis:ins:conn_reject[cls={{ $labels.cls }}, ins={{ $labels.ins }}][5m] = {{ $value }} > 0
            https://dba-g.p1staff.com/d/redis-instance?from=now-10m&to=now&viewPanel=88&fullscreen&var-ins={{ $labels.ins }}



      #==============================================================#
      #                         Latency                              #
      #==============================================================#
      # redis avg query response time > 160ms
      - alert: REDIS_RT_HIGH
        expr: redis:ins:rt > 0.00016
        for: 1m
        labels:
          severity: P1
        annotations:
          summary: "P1 Redis RT High: {{ $labels.cls }} {{ $labels.ins }}"
          description: |
            pg:ins:query_rt[cls={{ $labels.cls }}, ins={{ $labels.ins }}] = {{ $value }} > 160µs
            https://dba-g.p1staff.com/d/redis-instance?from=now-10m&to=now&viewPanel=97&fullscreen&var-ins={{ $labels.ins }}



      #==============================================================#
      #                        Saturation                            #
      #==============================================================#
      # redis cpu usage more than 60% for 1m
      - alert: REDIS_CPU_HIGH
        expr: redis:ins:cpu_usage > 0.60
        for: 1m
        labels:
          severity: P1
        annotations:
          summary: "P1 Redis CPU High: {{ $labels.cls }} {{ $labels.ins }}"
          description: |
            redis:ins:cpu_all[cls={{ $labels.cls }}, ins={{ $labels.ins }}] = {{ $value }} > 60%
            https://dba-g.p1staff.com/d/redis-instance?from=now-10m&to=now&viewPanel=43&fullscreen&var-ins={{ $labels.ins }}

      # redis mem usage more than 80% for 1m
      - alert: REDIS_MEM_HIGH
        expr: redis:ins:mem_usage > 0.80
        for: 1m
        labels:
          severity: P1
        annotations:
          summary: "P1 Redis Mem High: {{ $labels.cls }} {{ $labels.ins }}"
          description: |
            redis:ins:mem_usage[cls={{ $labels.cls }}, ins={{ $labels.ins }}] = {{ $value }} > 80%
            https://dba-g.p1staff.com/d/redis-instance?from=now-10m&to=now&viewPanel=7&fullscreen&var-ins={{ $labels.ins }}



      #==============================================================#
      #                         Traffic                              #
      #==============================================================#
      # redis qps more than 16000 for 5m
      - alert: REDIS_QPS_HIGH
        expr: redis:ins:qps > 16000
        for: 5m
        labels:
          severity: P2
        annotations:
          summary: "P2 Redis QPS High: {{ $labels.cls }} {{ $labels.ins }}"
          description: |
            redis:ins:qps[cls={{ $labels.cls }}, ins={{ $labels.ins }}] = {{ $value }} > 16000
            https://dba-g.p1staff.com/d/redis-instance?from=now-10m&to=now&viewPanel=96&fullscreen&var-ins={{ $labels.ins }}



...