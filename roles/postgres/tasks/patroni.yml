#!/usr/bin/ansible-playbook
---
#------------------------------------------------------------------------------
# chown watchdog
#------------------------------------------------------------------------------
- name: Grant watchdog ownership to dbsu
  tags: pg_watchdog
  ignore_errors: true
  file: path=/dev/watchdog owner={{ pg_dbsu }} group=postgres

#------------------------------------------------------------------------------
# Launch patroni
#------------------------------------------------------------------------------
# primary first , replica next
- name: Launch primary patroni instance
  tags: pg_primary
  any_errors_fatal: true
  when: pg_role == 'primary'
  block:
    - name: Launch patroni on primary instance
      systemd:
        name: patroni
        state: restarted
        enabled: yes
        daemon_reload: yes

    - name: Wait for patroni primary online
      wait_for: host={{ inventory_hostname }} port={{ patroni_port }} state=started timeout=60

    - name: Wait for postgres primary online
      wait_for: host={{ inventory_hostname }} port={{ pg_port }} state=started timeout=60

    - name: Check primary postgres service ready
      become_user: "{{ pg_dbsu }}"
      command: /usr/pgsql/bin/pg_isready -p {{ pg_port }}

    - name: Check replication connectivity on primary
      become_user: "{{ pg_dbsu }}"
      environment:
        PGPASSWORD: "{{ pg_replication_password }}"
      command: psql -w -h {{ pg_cluster_primary }} -p {{ pg_port }} -U {{ pg_replication_username }} -d postgres -Atc 'SELECT 1;'

#    - name: Copy pg ssl cert to data dir
#      any_errors_fatal: true
#      tags: pg_cert_primary
#      when: patroni_ssl_enabled|bool or pg_sslmode != 'disable'
#      copy: src="/pg/cert/{{ item }}" dest="/pg/data/{{ item }}" owner=postgres group=postgres mode=0600 remote_src=true
#      with_items:
#        - "root.crt"
#        - "server.crt"
#        - "server.key"


#------------------------------------------------------------------------------
# init postgres cluster
#------------------------------------------------------------------------------
- name: Init primary instance
  tags: pg_init
  any_errors_fatal: true
  when: pg_role == 'primary'
  block:
    - name: Render init roles sql
      tags: pg_init_role
      template: src="pg-init-roles.sql" dest=/pg/tmp/pg-init-roles.sql owner={{ pg_dbsu }} group=postgres mode=0755

    - name: Render init template sql
      tags: pg_init_tmpl
      template: src="pg-init-template.sql" dest=/pg/tmp/pg-init-template.sql owner={{ pg_dbsu }} group=postgres mode=0755

    - name: Render default pg-init scripts
      tags: pg_init_main
      template: src="{{ pg_init }}" dest=/pg/bin/pg-init owner={{ pg_dbsu }} group=postgres mode=0755

    - name: Execute initialization scripts
      tags: pg_init_exec
      become_user: "{{ pg_dbsu }}"
      command: bash /pg/bin/pg-init

    - name: Check primary instance ready
      tags: pg_init_exec
      become_user: "{{ pg_dbsu }}"
      command: /usr/pgsql/bin/pg_isready -p {{ pg_port }}



#------------------------------------------------------------------------------
# Write PGPASS
#------------------------------------------------------------------------------
- name: Write default userpass to .pgpass
  tags: pg_pass
  become_user: "{{ pg_dbsu }}"
  block:
    - name: Add dbsu password to pgpass if exists
      when: pg_dbsu_password is defined and pg_dbsu_password != ''
      shell: /pg/bin/pg-pass-add "{{ pg_dbsu }}" "{{ pg_dbsu_password }}"

    - name: Add system user to pgpass
      shell: /pg/bin/pg-pass-add "{{ item.username }}" "{{ item.password }}"
      with_items:
        - { username: "{{ pg_replication_username }}", password: "{{ pg_replication_password }}" }
        - { username: "{{ pg_monitor_username }}" ,password: "{{ pg_monitor_password }}" }
        - { username: "{{ pg_admin_username }}", password: "{{ pg_admin_password }}" }


#------------------------------------------------------------------------------
# Launch replicas
#------------------------------------------------------------------------------
# bootstrap other replicas
- name: Launch replica patroni instance
  tags: pg_replica
  any_errors_fatal: true
  when: pg_role != 'primary'
  block:
    - name: Check replication connectivity to primary
      become_user: "{{ pg_dbsu }}"
      environment:
        PGPASSWORD: "{{ pg_replication_password }}"
      command: psql -w -h {{ pg_cluster_primary }} -p {{ pg_port }} -U {{ pg_replication_username }} -d postgres -Atc 'SELECT 1;'

    - name: Launch patroni on replica instances
      systemd: name=patroni state=restarted enabled=yes daemon_reload=yes

    - name: Wait for patroni replica online
      wait_for: host={{ inventory_hostname }} port={{ patroni_port }} state=started timeout=30

    # NOTICE: may take quite a long time for existing cluster
    - name: Wait for postgres replica online
      wait_for: host={{ inventory_hostname }} port={{ pg_port }} state=started timeout=86400

    - name: Check replica postgres service ready
      become_user: "{{ pg_dbsu }}"
      command: /usr/pgsql/bin/pg_isready -p {{ pg_port }}


#------------------------------------------------------------------------------
# Write HBA
#------------------------------------------------------------------------------
- name: Write HBA Rules
  tags: pg_hba
  become_user: "{{ pg_dbsu }}"
  block:
    - name: Render hba rules
      template: src=pg_hba.conf.j2 dest=/pg/data/pg_hba.conf owner={{ pg_dbsu }} group=postgres mode=0600

    - name: Reload hba rules
      when: pg_reload|bool
      shell: "{{ pg_bin_dir }}/pg_ctl -D {{ pg_data }} reload;"

#------------------------------------------------------------------------------
# Reload Patroni Conf
#------------------------------------------------------------------------------
- name: Reload patroni
  tags: patroni_reload
  when: pg_reload|bool
  systemd: name=patroni state=reloaded daemon_reload=yes

#------------------------------------------------------------------------------
# Adjust Patroni mode
#------------------------------------------------------------------------------
# patroni_mode controls this section
- name: Pause patroni
  tags: pg_patroni
  ignore_errors: true
  when: patroni_mode == 'pause' and pg_role == 'primary'
  command: /usr/bin/patronictl -c /pg/bin/patroni.yml pause

# this will degrade cluster into a raw cluster
- name: Remove patroni
  tags: pg_patroni
  when: patroni_mode == 'remove'
  block:
    - name: Stop patroni on replica instance
      when: pg_role != 'primary'
      systemd: name=patroni state=stopped enabled=no daemon_reload=yes

    - name: Stop patroni on primary instance
      when: pg_role == 'primary'
      systemd: name=patroni state=stopped enabled=no daemon_reload=yes

    - name: Launch raw postgres on primary
      when: pg_role == 'primary'
      systemd: name=postgres state=restarted enabled=yes daemon_reload=yes

    - name: Launch raw postgres on replicas
      when: pg_role != 'primary'
      systemd: name=postgres state=restarted enabled=yes daemon_reload=yes

    - name: Wait for postgres online
      wait_for: host={{ inventory_hostname }} port={{ pg_port }} state=started timeout=60


...
