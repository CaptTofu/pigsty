---
- name: Create postgres user
  tags: pg_user
  when: pg_role == 'primary'
  block:
    - name: Render user {{ user.name }} creation sql
      when: pg_role == 'primary'
      tags: pg_user_config
      template: src="pg-user.sql" dest=/pg/tmp/pg-user-{{ user.name }}.sql owner={{ pg_dbsu }} group=postgres mode=0755

    - name: Execute user {{ user.name }} creation sql on primary
      tags: pg_user_create
      when: pg_role == 'primary'
      ignore_errors: true
      become_user: "{{ pg_dbsu }}"
      shell: |
        psql -h {{ pg_localhost }}  -p {{ pg_port }} -d postgres -AXtwqf /pg/tmp/pg-user-{{ user.name }}.sql || true;
        role_exists=$(psql -h {{ pg_localhost }} -p {{ pg_port }} -d postgres -AXtwqc "SELECT true WHERE EXISTS(SELECT * FROM pg_authid WHERE rolname = '{{ user.name }}' LIMIT 1)")
        [[ -z "${role_exists}" ]] && exit 1 || exit 0

# retrieve biz user passwords in AUTO mode (when auth_query is not enabled)
- name: Add business user to pgbouncer
  tags: pg_user_pgbouncer
  when: pgbouncer_enabled|bool and user.pgbouncer is defined and user.pgbouncer|bool and not pgbouncer_auth_query|bool
  ignore_errors: true
  become_user: "{{ pg_dbsu }}"
  shell: /bin/bash /pg/bin/pgbouncer-create-user '{{ user.name }}' 'AUTO'

...
