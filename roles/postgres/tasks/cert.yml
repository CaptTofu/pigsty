#------------------------------------------------------------------------------
# check pg private key existence on primary instance & meta node CA
#------------------------------------------------------------------------------
- name: check pg private key exists
  tags: pg_cert_check
  block:

    # check pg sever private key on primary instance
    - name: check if pg private key exists on primary
      stat: path="/pg/cert/server.key"
      register: pg_key_on_primary_result

    # check pg sever private key on primary meta node (in case of using another meta node)
    - name: check if pg private on meta node
      delegate_to: "{{ meta_ip }}"
      stat: path="/etc/pki/CA/{{ pg_cluster }}.key"
      register: pg_key_on_meta_result

    # set check result
    - name: set pg cert exists flag
      connection: local
      set_fact:
        pg_key_on_primary: "{{ pg_key_on_primary_result.stat.exists }}"
        pg_key_on_meta: "{{ pg_key_on_meta_result.stat.exists }}"


#------------------------------------------------------------------------------
# Generate Cluster Private Key or Make sure it exists on meta
#------------------------------------------------------------------------------
# TODO: if server.key exists on primary node, it should exists on meta node /etc/pki/CA/
# To increase reliability, we should check if server.key exists on primary meta node
# since there may be a meta node failure, if not we will copy it back to primary meta node- name: Make sure pg private key exists
- name: create pg cluster private key
  tags: pg_cert_key
  when: pg_role == 'primary'
  block:

    # postgres primary instance -> local files/pki
    - name: fetch pg private key from primary
      when: pg_key_on_primary|bool and not pg_key_on_meta|bool
      fetch: src=/pg/cert/server.key dest=files/pki/{{ pg_cluster }}.key flat=yes

    - name: pour pg private key back to meta node
      delegate_to: "{{ meta_ip }}"
      when: pg_key_on_primary|bool and not pg_key_on_meta|bool
      copy: src="files/pki/{{ pg_cluster }}.key" dest="/etc/pki/CA/{{ pg_cluster }}.key" mode=0600

    # generate (or do nothing if exists) pg server private key on primary meta node
    - name: generate pgsql cluster private key
      delegate_to: "{{ meta_ip }}"
      openssl_privatekey:
        path: "/etc/pki/CA/{{ pg_cluster }}.key"
        force: no        # DO NOT OVERWRITE EXISTING PRIVATE KEY!
        mode: 0600

    # This will guarantee private key on local files/pki
    - name: fetch pg private key from meta node
      delegate_to: "{{ meta_ip }}"
      fetch: src="/etc/pki/CA/{{ pg_cluster }}.key" dest=files/pki/{{ pg_cluster }}.key flat=yes


#------------------------------------------------------------------------------
# Signing server certs
#------------------------------------------------------------------------------
- name: signing cert for postgres
  tags: pg_cert_sign
  delegate_to: "{{ meta_ip }}"
  block:

    # generate csr for each member
    - name: generate pg server signing request
      openssl_csr:
        path: "/etc/pki/CA/{{ pg_cluster }}-{{ pg_seq }}.csr"
        privatekey_path: "/etc/pki/CA/{{ pg_cluster }}.key"
        common_name: "{{ pg_cluster }}-{{ pg_seq }}"
        organization_name: pigsty
        organizational_unit_name: postgres
        subject_alt_name:
          - "DNS:localhost"
          - "DNS:{{ pg_cluster }}"
          - "DNS:{{ pg_cluster }}-{{ pg_seq }}"
          - "IP:127.0.0.1"
          - "IP:{{ inventory_hostname }}"

    - name: issue pg server certificate
      openssl_certificate:
        path: "/etc/pki/CA/{{ pg_cluster }}-{{ pg_seq }}.crt"
        csr_path: "/etc/pki/CA/{{ pg_cluster }}-{{ pg_seq }}.csr"
        ownca_path: /etc/pki/ca.crt
        ownca_privatekey_path: /etc/pki/ca.key
        provider: ownca
        selfsigned_not_after: "+{{ cert_validity }}"
        mode: 0644

    - name: fetch pgsql cert to local
      fetch: src="/etc/pki/CA/{{ pg_cluster }}-{{ pg_seq }}.crt" dest="files/pki/{{ pg_cluster }}-{{ pg_seq }}.crt" flat=yes


#------------------------------------------------------------------------------
# Distribute key & certs
#------------------------------------------------------------------------------
- name: copy pg server certificates
  any_errors_fatal: true
  tags: pg_cert_copy
  block:
    - name: copy pg server cert
      copy: src="files/pki/{{ pg_cluster }}-{{ pg_seq }}.crt" dest="/pg/cert/server.crt" owner=postgres group=postgres mode=0644

    - name: copy pg server key
      copy: src="files/pki/{{ pg_cluster }}.key" dest="/pg/cert/server.key" owner=postgres group=postgres mode=0600

...