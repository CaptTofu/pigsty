---
#------------------------------------------------------------------------------
# register postgres service to consul
#------------------------------------------------------------------------------
- name: Register postgres service to consul
  tags: pg_register
  when: service_registry == 'consul'
  block:
    - name: Copy pg service definition to consul
      template:
        src: svc-{{ item }}.json.j2
        dest: /etc/consul.d/svc-{{ item }}.json
        owner: consul
        group: postgres
        mode: 0660
      with_items:
        - postgres
        - pgbouncer
        - patroni

    - name: Reload postgres consul service
      systemd: name=consul state=reloaded



#------------------------------------------------------------------------------
# register postgres to grafana datasource
#------------------------------------------------------------------------------
- name: Register postgres service to grafana
  tags: pg_grafana
  ignore_errors: true
  block:
    - name: Render grafana datasource definition
      template: src=datasource.json.j2 dest=/pg/tmp/datasource.json owner="{{ pg_dbsu }}" group=postgres mode=0600

    - name: Register datasource to grafana
      shell: |
        #!/bin/bash

        # https://grafana.com/docs/grafana/latest/http_api/
        GRAFANA_ENDPOINT="{{ grafana_endpoint }}"          # http://localhost:3000
        GRAFANA_USERNAME="{{ grafana_admin_username }}"    # admin
        GRAFANA_PASSWORD="{{ grafana_admin_password }}"    # admin

        # delete existing datasource with same name
        curl -X DELETE "${GRAFANA_ENDPOINT}/api/datasources/name/{{ pg_instance }}" \
        -u "${GRAFANA_USERNAME}:${GRAFANA_PASSWORD}"  \
        -H 'Content-Type: application/json'

        # create new datasource
        curl -X POST "${GRAFANA_ENDPOINT}/api/datasources/" \
        -u "${GRAFANA_USERNAME}:${GRAFANA_PASSWORD}"  \
        -H 'Content-Type: application/json'           \
        -d @/pg/tmp/datasource.json

...